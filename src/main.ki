import array;
import graph;
import test_check;
import parse;
import stdlib;
import string;

func run_tests() bool {
  test_parse_passed bool = test_parse();
  if test_parse_passed {
    print(Stdout(), _u8("parse_test passes\n"));
  } else {
    print(Stdout(), _u8("parse_test FAIL\n"));
  }
  fflush(Stdout());
  test_check_res tup[bool, u32] = test_check();
  if test_check_res.car {
    print(Stdout(), _u8("check_test passes\n"));
  } else {
    print(Stdout(), _u8("check_test FAIL ("), to_u8str(test_check_res.cdr), _u8(" failures)\n"));
  }
  fflush(Stdout());
  test_bigint_passed bool = test_bigint();
  if test_bigint_passed {
    print(Stdout(), _u8("check_bigint passes\n"));
  } else {
    print(Stdout(), _u8("check_bigint FAIL\n"));
  }
  fflush(Stdout());
  all_success bool = test_parse_passed && test_check_res.car && test_bigint_passed;
  if all_success {
    print(Stdout(), _u8("All tests PASS!\n"));
  } else {
    print(Stdout(), _u8("FAIL FAIL FAIL\n"));
  }
  fflush(Stdout());
  return all_success;
}

func run_on_file(modulename array[u8]) bool {
  path array[u8] = concat(modulename, _u8(".ki"));
  ERR(_u8("run_on_file not implemented for file "), path);
  return false;
}

// TODO: c_int
export func main(argc i32, argv **u8) i32 {
  if argc == 1 {
    if !run_tests() {
      return 1;
    }
  } else if argc == 2 {
    if !run_on_file(lpz_as_u8str(argv[1])) {
      return 1;
    }
  } else {
    print(Stderr(), _u8("Usage: "), lpz_as_u8str(argv[0]), _u8(" [<filename>]\n"));
    return 1;
  }

  return 0;
}
