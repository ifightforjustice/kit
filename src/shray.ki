import stdlib;

defclass[T] move shray struct {
  count size;
  cap size;
  refp *size;
  ptr *T;
};

access shray[_] {
  inline func[T] do_init(r *shray[T]) void {
    r->count = 0;
    r->cap = 0;
    r->refp = null;
    r->ptr = null;
  }

  func[T] do_copy(dest *shray[T], src *shray[T]) void {
    if src->count == 0 {
      dest->count = 0;
      dest->cap = 0;
      dest->refp = null;
      dest->ptr = null;
      return;
    }
    dest->count = src->count;
    dest->cap = src->cap;
    refp *size = src->refp;
    *refp = *refp + 1;
    dest->refp = refp;
    dest->ptr = src->ptr;
  }

  func[T] do_destroy(r *shray[T]) void {
    if r->count == 0 {
      return;
    }
    refp *size = r->refp;
    refc size = *refp - 1;
    if refc == 0 {
      free(@[*void] cast(refp));
      rptr *T = r->ptr;
      for i size = r->count; i > 0; {
        i = i - 1;
        destroy(&rptr[i]);
      }
      free(@[*void] cast(rptr));
      return;
    }
    *refp = refc;
  }

  inline func[T] data(r *shray[T]) *T {
    return r->ptr;
  }

  inline func[T] count(r *shray[T]) size {
    return r->count;
  }

  inline func[T] get(r *shray[T], i size) T {
    check(i < r->count);
    return r->ptr[i];
  }

  inline func[T] ref(r *shray[T], i size) *T {
    check(i < r->count);
    return &r->ptr[i];
  }

  access array[_] {
    // Clears its parameter.
    func[T] freeze(r *array[T]) shray[T] {
      if r->count == 0 {
        ret shray[T];
        clear(r);
        return ret;
      }
      ret shray[T];
      ret.count = r->count;
      ret.cap = r->cap;
      ret.ptr = r->ptr;
      refp *size = cast(checkmalloc(sizeof@[size]));
      *refp = 1;
      ret.refp = refp;

      r->count = 0;
      r->cap = 0;
      r->ptr = null;

      return ret;
    }
  }

  inline func[T] swap(x *shray[T], y *shray[T]) void {
    tmp var = x->~;
    x->~ = y->~;
    y->~ = tmp;
  }
}

inline func[T] empty(r *shray[T]) bool {
  return count(r) == 0;
}

func[U, T] mapconvert(x *shray[T]) shray[U] {
  build array[U];
  n size = count(x);
  reserve(&build, n);
  for i size = 0; i < n; i = i + 1 {
    push(&build, @[U]~ *ref(x, i));
  }
  return freeze(&build);
}

func[T] repeat(n size, x T) shray[T] {
  ret array[T] = repeat(n, x);
  return freeze(&ret);
}

// TODO: This could be improved.
func[T] mk_copy(x *shray[T]) array[T] {
  ret array[T];
  n size = count(x);
  p *T = data(x);
  reserve(&ret, n);
  for i size = 0; i < n; i = i + 1 {
    push(&ret, p[i]);
  }
  return ret;
}

func[T] shray_equal(a *shray[T], b *shray[T]) bool {
  n size = count(a);
  if n != count(b) {
    return false;
  }
  return raw_buf_equal(data(a), data(b), n);
}

func[T, U, V, W] concat(a opt[T], b U, c V, d W) shray[T] {
  ret array[T];
  append(&ret, &a);
  append(&ret, &b);
  append(&ret, &c);
  append(&ret, &d);
  return freeze(&ret);
}

func[T] find(a *shray[T], b T) opt[size] {
  n size = count(a);
  for i size = 0; i < n; i = i + 1 {
    if *ref(a, i) == b {
      return Has(i);
    }
  }
  return None();
}

func[T, U] concat(a opt[T], b U) shray[T] {
  ret array[T];
  append(&ret, &a);
  append(&ret, &b);
  return freeze(&ret);
}

inline func[T] append(x *array[T], y *shray[T]) void {
  append_raw(x, data(y), count(y));
}

func[T] subarray(a *shray[T], i size) array[T] {
  // If i >= count(a), successfully return empty.
  ret array[T];
  n size = count(a);
  for ; i < n; i = i + 1 {
    push(&ret, *ref(a, i));
  }
  return ret;
}

func[T] mk_shray() shray[T] {
  ret shray[T];
  return ret;
}

func[T] mk_shray(x T) shray[T] {
  ret array[T];
  reserve(&ret, 1);
  push(&ret, x);
  return freeze(&ret);
}

func[T] mk_shray(x T, y T) shray[T] {
  ret array[T];
  reserve(&ret, 2);
  push(&ret, x);
  push(&ret, y);
  return freeze(&ret);
}

func[T] mk_shray(x T, y T, z T) shray[T] {
  ret array[T];
  reserve(&ret, 3);
  push(&ret, x);
  push(&ret, y);
  push(&ret, z);
  return freeze(&ret);
}
