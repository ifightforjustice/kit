import stdlib;

defclass[T] move array struct {
  size size;
  cap size;
  ptr *T;
};

access array[_] {
  def[T] do_init = fn(r *array[T]) void {
    r->size = 0u;
    r->cap = 0u;
    var null *T;
    r->ptr = null;
  };

  def[T] do_copy = fn(dest *array[T], src *array[T]) void {
    dest->size = src->size;
    dest->cap = src->cap;
    var s size;
    s.~ = src->size.~ * sizeof@[T];
    dest->ptr = @[*T] cast(malloc(s));
  };

  def[T] do_destroy = fn(r *array[T]) void {
    for var i size = r->size; i.~ > 0u; {
      i.~ = i.~ - 1u;
      destroy(&r->ptr[i]);
    }
    free(@[*void] cast(r->ptr));
  };
}

def foo = fn() void {
  var v array[array[i32]];
  var u = v;
};
