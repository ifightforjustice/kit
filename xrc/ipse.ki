import state;

// This file's a grab-bag for ipse type related stuff.  Probably most of it should be
// moved to other files and this should go away.

// I suspect instpacks might require ipse type name mapping information, so this is a
// placeholder.
func canonicalized_pack(pack *te_instpack) te_instpack {
  return *pack;
}

func canonicalized_ipse_sym(im *identmap, s sym, ipse_names_append *array[sym], canonicalized_scope_append *type_scope) sym {
  *canonicalized_scope_append = { };  // to break code later
  if case Has(ix size) = find(ipse_names_append, s) {
    return make_canonicalized_ipse_name(im, ix);
  } else {
    n size = count(ipse_names_append);
    push(ipse_names_append, s);
    return make_canonicalized_ipse_name(im, n);
  }
}

func canonicalized_app_pack(im *identmap, pack *te_app_pack, ipse_names_append *array[sym], canonicalized_scope_append *type_scope) te_app_pack {
  build array[sym];
  foreach s sym in elems(&pack->ipse_mappings) {
    push(&build, canonicalized_ipse_sym(im, s, ipse_names_append, canonicalized_scope_append));
  }

  return {pack->teip, freeze(&build)};
}

func canonicalize_arraytype_count(a *opt[u32]) opt[u32] {
  return *a;
}

func make_canonicalized_ipse_name(im *identmap, ix size) sym {
  b array[u8];
  push(&b, '$');
  build_u8str(void, &b, &ix);
  return intern(im, from_u8(&b));
}

func canonicalize_idy_ipses(im *identmap, t_scope *type_scope, t *te_typeexpr, out *te_typeexpr, ipse_names_append *array[sym], canonicalized_scope_append *type_scope) void {
  switch t {
  case &TeName(a te_name):
    *out = TeName({a.value, Has!canonicalized_pack(unHas!&a.pack)});
  case &TeApp(a te_typeapp):
    newparams array[te_typeexpr];
    nparams size = count(&a.params);
    for i size = 0; i < nparams; i = i + 1 {
      tmp te_typeexpr;
      canonicalize_idy_ipses(im, t_scope, ref(&a.params, i), &tmp, ipse_names_append, canonicalized_scope_append);
      push(&newparams, tmp);
    }
    *out = TeApp({a.typefunc, freeze(&newparams), Has!canonicalized_app_pack(im, unHas!&a.pack, ipse_names_append, canonicalized_scope_append)});
  case &TeUnion(a te_union):
    // Honestly, a union having ipses would be pretty weird.
    *out = TeUnion({canonicalize_idy_vardecls(im, t_scope, &a.fields, ipse_names_append, canonicalized_scope_append)});
  case &TeArraytype(a te_arraytype):
    count opt[u32] = canonicalize_arraytype_count(&a.count);
    param shp[te_typeexpr];
    canonicalize_idy_ipses(im, t_scope, oo(&a.param), oo(&param), ipse_names_append, canonicalized_scope_append);
    *out = TeArraytype({count, param});
  case &TeIpse(a te_ipse):
    *out = TeIpse({canonicalized_ipse_sym(im, a.name, ipse_names_append, canonicalized_scope_append)});
  case &TeUnknown:
    ice(_u8("canonicalize_idy_ipses sees TeUnknown."));
  }
}

func canonicalize_idy_vardecls(im *identmap, t_scope *type_scope, a *shray[te_vardecl], ipse_names_append *array[sym], canonicalized_scope_append *type_scope) shray[te_vardecl] {
  build array[te_vardecl];
  n size = count(a);
  for i size = 0; i < n; i = i + 1 {
    decl *te_vardecl = ref(a, i);
    tmp te_typeexpr;
    canonicalize_idy_ipses(im, t_scope, &decl->type, &tmp, ipse_names_append, canonicalized_scope_append);
    push(&build, {decl->name, tmp});
  }
  return freeze(&build);
}


func map_ipses_arraytype_count(ipse_mappings *shray[sym], count *opt[u32]) opt[u32] {
  return *count;
}

func map_vardecl_ipses(im *identmap, ipse_mappings *shray[sym], inn *shray[te_vardecl]) shray[te_vardecl] {
  // A performant short-cut.
  if empty(ipse_mappings) {
    return *inn;
  }

  bu array[te_vardecl];
  foreach vd *te_vardecl in refs(inn) {
    push(&bu, {vd->name, map_ipses(im, ipse_mappings, &vd->type)});
  }
  return freeze(&bu);
}

func map_ipses_to_app_pack(im *identmap, ipse_mappings *shray[sym], pack *te_app_pack) te_app_pack {
  build array[sym];
  foreach s sym in elems(&pack->ipse_mappings) {
    push(&build, map_ipse_sym(im, ipse_mappings, s));
  }

  return {pack->teip, freeze(&build)};
}

func map_ipse_sym(im *identmap, ipse_mappings *shray[sym], s sym) sym {
  n size = count(ipse_mappings);
  for i size = 0; i < n; i++ {
    if s == make_canonicalized_ipse_name(im, i) {
      return ipse_mappings[i];
    }
  }
  DBG(_u8("map_ipse_sym symbol "), lookup(im, s), _u8(" unmapped"));
  return s;
}

func map_ipses(im *identmap, ipse_mappings *shray[sym], t *te_typeexpr) te_typeexpr {
  switch t {
  case &TeName(a te_name):
    return *t;
  case &TeApp(a te_typeapp):
    newparams array[te_typeexpr];
    foreach param *te_typeexpr in refs(&a.params) {
      push(&newparams, map_ipses(im, ipse_mappings, param));
    }
    return TeApp({a.typefunc, freeze(&newparams), Has!map_ipses_to_app_pack(im, ipse_mappings, unHas!&a.pack)});
  case &TeUnion(a te_union):
    return TeUnion({map_vardecl_ipses(im, ipse_mappings, &a.fields)});
  case &TeArraytype(a te_arraytype):
    count opt[u32] = map_ipses_arraytype_count(ipse_mappings, &a.count);
    return TeArraytype({count, emshp(map_ipses(im, ipse_mappings, oo(&a.param)))});
  case &TeIpse(a te_ipse):
    return TeIpse({map_ipse_sym(im, ipse_mappings, a.name)});
  case &TeUnknown:
    ice(_u8("map_ipses sees TeUnknown"));
    return fake();
  }
}
