import typeexpr;

// unify_* functions _mutate_ this -- they can set updated to true.
struct unify_information {
  // Gets set if any _new information_ was learned during unification -- i.e. the unified output is more complete than the input.
  updated bool;
}

func mk_fresh_info() unify_information {
  return {false};
}

// t references the generic names in "names", whose corresponding values in "unif_parms"
// might be incomplete.  We update the values in unif_parms when necessary.  t does not
// need to be complete -- this code is also used by unify_types.
//
// "*unified_out" is initialized with the unified type, _except_ when t references a
// generic name, in which case it's initialized with the value of "*t", the generic name.
// (The reason is, we might not have gathered complete information about the generic
// parameter when we've halfway-processed the type -- the caller can and should
// reconstruct the correct values later.)
func unify_under_generics(scope *type_scope, up *unif_parms, pt *te_typeexpr,
                          names *shray[te_generik], t *te_typeexpr,
                          info_app *unify_information,
                          unified_out *te_typeexpr) bool {
  if case &TeUnknown = pt {
    // In the TeUnknown case below, we assume that this short-circuiting check has been done already.

    // DOTTED(): This will no longer be correct behavior with a dotted parameter (if they can make it this far).  Maybe.
    // It's worth pointing out:  This _is_ correct behavior if t is a generic parameter.
    *unified_out = *t;
    switch t {
    case &TeUnknown:
      void;
    default:
      info_app->updated = true;
    }
    return true;
  }
  switch t {
  case &TeName(a te_name):
    if case Has(ix size) = lookup_plain_name(names, a.value) {
      info unify_information = mk_fresh_info();
      unified te_typeexpr;
      if !unify_types(scope, &up->tys[ix], pt, &info, &unified) {
        return false;
      }
      up->tys[ix] = unified;
      up->dirty[ix] |= info.updated;
      *unified_out = TeName({a.value, None});
      return true;
    } else {
      if case &TeName(pa te_name) = pt {
        // NOTE: Naturally, at some point scopage might be a factor.
        if a.value != pa.value {
          return false;
        }
        *unified_out = TeName({a.value, None});
        return true;
      } else {
        return false;
      }
    }

  case &TeApp(a te_app):
    // Generics can't be type constructors (yet).
    if case &TeApp(pa te_app) = pt {
      unified_typefunc te_puretype;
      if !unify_puretypes(&a.typefunc, &pa.typefunc, &unified_typefunc) {
        return false;
      }
      a_params *shray[te_typeexpr] = &a.params;
      pa_params *shray[te_typeexpr] = &pa.params;
      n size = count(a_params);
      if n != count(pa_params) {
        return false;
      }
      unified_params array[te_typeexpr];
      reserve(&unified_params, n);
      for i size = 0; i < n; i = i + 1 {
        unified te_typeexpr;
        if !unify_under_generics(scope, up, &pa_params[i], names, &a_params[i], info_app, &unified) {
          return false;
        }
        push(&unified_params, unified);
      }
      *unified_out = TeApp({unified_typefunc, freeze(&unified_params), None});
      return true;
    } else {
      return false;
    }

  case &TeUnion(a te_union):
    if case &TeUnion(pa te_union) = pt {
      n size = count(&a.fields);
      if n != count(&pa.fields) {
        return false;
      }
      unified_fields array[te_vardecl];
      for i size = 0; i < n; i = i + 1 {
        pd *te_vardecl = &pa.fields[i];
        d *te_vardecl = &a.fields[i];
        if pd->name != d->name {
          return false;
        }
        unified te_typeexpr;
        if !unify_under_generics(scope, up, &pd->type, names, &d->type, info_app, &unified) {
          return false;
        }
        push(&unified_fields, {d->name, unified});
      }
      *unified_out = TeUnion({freeze(&unified_fields)});
      return true;
    } else {
      return false;
    }

  case &TeArraytype(a te_arraytype):
    if case &TeArraytype(pa te_arraytype) = pt {
      unified_count opt[u32];
      if case Has(ac u32) = a.count {
        if case Has(pac u32) = pa.count {
          if ac != pac {
            return false;
          } else {
            unified_count = Has(ac);
          }
        } else {
          unified_count = Has(ac);
        }
      } else {
        unified_count = pa.count;
      }
      unified_type te_typeexpr;
      if !unify_under_generics(scope, up, oo(&pa.param), names, oo(&a.param), info_app, &unified_type) {
        return false;
      }
      *unified_out = TeArraytype({unified_count, emshp(unified_type)});
      return true;
    } else {
      return false;
    }

  case &TeIpse(a te_ipse):
    // NOTE: I mimicked the TeName case, and haven't fully thought out how that would
    // affect this function's callers, so treat this code with skepticism.
    if case &TeIpse(pa te_ipse) = pt {
      // NOTE: Beware scopage, as with TeName, when that becomes a factor.
      if a.name != pa.name {
        a_oftype cu_typeexpr = scope_lookup(scope, a.name);
        pa_oftype cu_typeexpr = scope_lookup(scope, pa.name);
        // If a.name isn't in "names", it cannot have an oftype that references "names".  So we can just use unify_types.  I mean generally a cu_typeexpr can't reference "names", so if they types share the same local scope, ditto, we already replaced its generics and cac'd the oftype.

        info unify_information = mk_fresh_info();
        unified_oftype_discard te_typeexpr;
        if !unify_types(scope, &a_oftype.x, &pa_oftype.x, &info, &unified_oftype_discard) {
          return false;
        }
        // we're unifying complete types just to check equivalence.
        check(!info.updated);
      } else {
        // Just to assert the scope actually has the name.
        discard cu_typeexpr = scope_lookup(scope, a.name);
      }
      *unified_out = TeIpse({a.name});
      return true;
    } else {
      return false;
    }

  case &TeUnknown:
    // Right now, the only callers are type_matches and unify_types.  From type_matches,
    // t is complete, and from unify_types, there are no generic names.
    check(count(names) == 0);
    *unified_out = *pt;
    // We know pt is _not_ TeUnknown -- that's checked up top.
    info_app->updated = true;
    return true;
  }
}

func unify_puretypes(ppta *te_puretype, pptb *te_puretype, out *te_puretype) bool {
  switch ppta {
  case &TePureName(as sym):
    switch pptb {
    case &TePureName(bs sym):
      if as == bs {
        *out = TePureName(as);
        return true;
      } else {
        return false;
      }
    case &TePureUnknown:
      *out = *ppta;
      return true;
    }
  case &TePureUnknown:
    *out = *pptb;
    return true;
  }
}

func unify_types(scope *type_scope, pta *te_typeexpr, ptb *te_typeexpr, out *te_typeexpr) bool {
  info unify_information = mk_fresh_info();
  return unify_types(scope, pta, ptb, &info, out);
}

func unify_types(scope *type_scope, pta *te_typeexpr, ptb *te_typeexpr, info_app *unify_information, out *te_typeexpr) bool {
  names shray[te_generik];
  up unif_parms = mk_empty_unif_parms();
  return unify_under_generics(scope, &up, pta, &names, ptb, info_app, out);
}

func unifies(complete *te_typeexpr, pt *te_typeexpr) bool {
  unified te_typeexpr;
  scope type_scope;
  if unify_types(&scope, complete, pt, &unified) {
    return true;
  } else {
    return false;
  }
}

struct type_matches_precisely {
  // Complete types for all the template/generic names.
  parms_types shray[te_typeexpr];
}

enum type_matches_res {
  TypeDoesNotMatch void;
  TypeMatchesAmbiguously void;
  TypeMatchesPrecisely type_matches_precisely;
}

struct unif_parms {
  tys shray[te_typeexpr];
  // They _start out_ dirty -- verify_matches_oftypes de-dirties some.
  // (The reason is, "dirty" means "consider smashing its oftype with a generic oftype" right now.  This could change later.)
  dirty shray[bool];
}

// Makes a _copy_ of parms.
func mk_unif_parms(parms *shray[te_typeexpr]) unif_parms {
  tmp array[te_typeexpr] = mk_copy(parms);
  n size = count(&tmp);
  return {freeze(&tmp), repeat(n, false)};
}

func mk_empty_unif_parms() unif_parms {
  return {mk_shray(), mk_shray()};
}

// t is complete, but it references the generic names in "names", whose corresponding
// values in "parms" could be incomplete.  pt is the partial type of an expression we're
// matching against this generic definition.  count(parms) == count(names).
func type_matches(scope *type_scope, parms *shray[te_typeexpr], pt *te_typeexpr, names *shray[te_generik],
                  t *te_typeexpr) type_matches_res {
  check(count(names) == count(parms));
  // We need to retain all new information we gain about the value of the generic param
  // typeexprs as we compare the whole type, in order to make sure we don't match
  // conflicting information about a generic parameter.
  up unif_parms = mk_unif_parms(parms);
  // Since t is complete, unified is irrelevant and must be identical to t.  Might become untrue if ipses unify into a fresh ipse value.
  unified te_typeexpr;
  info unify_information = mk_fresh_info();
  if !unify_under_generics(scope, &up, pt, names, t, &info, &unified) {
    return TypeDoesNotMatch;
  }
  if !verify_matches_oftypes(scope, &up, names) {
    // This does not kill match_def completely.  The reason is, it's oftypes getting smashed with other concrete types that would cause verify_matches_oftypes to fail.
    return TypeDoesNotMatch;
  }
  if !all_complete_computed(&up.tys).complete {
    return TypeMatchesAmbiguously;
  }
  return TypeMatchesPrecisely({up.tys});
}

func verify_matches_oftypes(scope *type_scope, up *unif_parms, names *shray[te_generik]) bool {
  n size = count(names);
  check(n == count(&up->tys));
  for i size = 0; i < n; i++ {
    if up->dirty[i] {
      up->dirty[i] = false;
      switch &names[i] {
      case &TePlainGeneric(s sym):
        if case &TeIpse(ti te_ipse) = &up->tys[i] {
          // See (A) ^^, likewise.
          return false;
        }
      }
    }
  }
  return true;
}

func verify_all_plainar(p *shray[te_typeexpr]) bool {
  foreach ty *te_typeexpr in refs(p) {
    if case &TeIpse(ti te_ipse) = ty {
      return false;
    }
  }
  return true;
}
