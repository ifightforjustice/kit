import ast;

defenum generics_arity {
  NoParamsArity void;
  FiniteArity u32;
  // The number's the minimal arity, variadics always go at the end.
  VariadicArity u32;
};

func arity(a *ast_generics) generics_arity {
  switch a {
    case &NoGenerics(v void): { return NoParamsArity(void); }
    case &HasGenerics(arr array[ast_ident]): {
      return FiniteArity(~count(&arr));
    }
    case &VariadicGenerics(b ast_variadic_generics): {
      return VariadicArity(~count(&b.names));
    }
  }
}

func build_u8str(r *array[u8], a *generics_arity) void {
  switch a {
    case &NoParamsArity(v void): {
      append(r, _u8("NoParamsArity"));
    }
    case &FiniteArity(n u32): {
      append(r, _u8("FiniteArity("));
      build_u8str(r, &n);
      push(r, ')');
    }
    case &VariadicArity(n u32): {
      append(r, _u8("VariadicArity("));
      build_u8str(r, &n);
      push(r, ')');
    }
  }
}