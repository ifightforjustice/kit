import ast;

defenum generics_arity {
  NoParamsArity void;
  FiniteArity u32;
  // The number's the minimal arity, variadics always go at the end.
  VariadicArity u32;
};

func arity(a *ast_generics) generics_arity {
  switch a {
    case &NoGenerics(v void): { return NoParamsArity(void); }
    case &HasGenerics(arr array[ast_ident]): { return FiniteArity(~count(&arr)); }
  }
}

// TODO: Who uses this function?  Is it right?  Rename and chase down.
func arity_identical(a generics_arity, b generics_arity) bool {
  switch a {
    case NoParamsArity(v void): {
      if case NoParamsArity(u) = b { return true; }
    }
    case FiniteArity(x u32): {
      if case FiniteArity(y u32) = b { return x == y; }
    }
    case VariadicArity(x u32): {
      if case VariadicArity(y u32) = b { return x == y; }
    }
  }
  return false;
}

func build_u8str(r *array[u8], a *generics_arity) void {
  switch a {
    case &NoParamsArity(v void): {
      append(r, _u8("NoParamsArity"));
    }
    case &FiniteArity(n u32): {
      append(r, _u8("FiniteArity("));
      build_u8str(r, &n);
      push(r, ')');
    }
    case &VariadicArity(n u32): {
      append(r, _u8("VariadicArity("));
      build_u8str(r, &n);
      push(r, ')');
    }
  }
}