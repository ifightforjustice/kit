import hash;
import string;

deftype ident_value size;

def `~` fn[size, ident_value] = wrapconvert;

func `==`(x ident_value, y ident_value) bool {
  return x.~ == y.~;
}
func `!=`(x ident_value, y ident_value) bool {
  return x.~ != y.~;
}

defclass copy identmap struct {
  // A map from strings to ident values.
  table hash[string, ident_value];
  // A map from ident values to strings.
  backmap array[string];
};

access identmap {
  func intern(im *identmap, s string) ident_value {
    val size = count(&im->backmap);
    if try_insert(&im->table, s, ~val) {
      append(&im->backmap, s);
      return ~val;
    } else {
      switch lookup(&im->table, s) {
        case Has(value): {
          return value;
        }
      }
    }
  }

  func is_interned(im *identmap, s string) opt[ident_value] {
    return lookup(&im->table, s);
  }

  func lookup(im *identmap, ident ident_value) string {
    return get(&im->backmap, ident.~);
  }
}


