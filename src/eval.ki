import check;

deftype st_env struct {

};

deftype st_symbol_name sym;

deftype st_symbolref struct {
  name st_symbol_name;
  offset size;
  count size;
};

deftype st_value struct {
  bytes array[u8];
  // Values of external symbols.
  symbolrefs array[st_symbolref];
};

func mk_st_value(size u32) st_value {
  return {repeat(~size, 0), mk_array()};
}

func st_eval_def(cs *checkstate, ent def_entry_id, inst_id def_inst_id, out *st_value) bool {
  inst *def_inst = ref_inst(cs, inst_id);
  if inst->status != FinishedCheckingRhs(void) {
    ice(_u8("Evaling def we have not finished checking."));
  }
  if case &Has(e ast_expr) = &inst->rhs {
    // TODO: Mark that evaluation for this def has begun.
    env st_env;
    retvar st_value;
    if !st_eval_expr(cs, &env, &e, &retvar) {
      return false;
    }
    *out = retvar;
    return true;
  } else {
    ice(_u8("st_eval_def on an extern def."));
    return fake();
  }
}

func st_eval_expr(cs *checkstate, env *st_env, x *ast_expr, out *st_value) bool {
  return TODO();
}