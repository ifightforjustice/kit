import typeexpr;

// t references the generic names in "names", whose corresponding values in "unif_parms"
// might be incomplete.  We update the values in unif_parms when necessary.  t does not
// need to be complete -- this code is also used by unify_types.
//
// "*unified_out" is initialized with the unified type, _except_ when t references a
// generic name, in which case it's initialized with the value of "*t", the generic name.
// (The reason is, we might not have gathered complete information about the generic
// parameter when we've halfway-processed the type -- the caller can and should
// reconstruct the correct values later.)
func unify_under_generics(pt *te_typeexpr,
                          names *shray[te_generik], unif_parms *array[te_typeexpr],
                          t *te_typeexpr, unified_out *te_typeexpr) bool {
  if case &TeUnknown = pt {
    // It's worth pointing out:  This _is_ correct behavior if t is a generic parameter.
    *unified_out = *t;
    return true;
  }
  switch t {
    case &TeName(a te_name): {
      if case Has(ix size) = lookup_plain_name(names, a.value) {
        unified te_typeexpr;
        if !unify_types(&unif_parms[ix], pt, &unified) {
          return false;
        }
        unif_parms[ix] = unified;
        *unified_out = TeName({a.value, None});
        return true;
      } else {
        if case &TeName(pa te_name) = pt {
          // NOTE: Naturally, at some point scopage might be a factor.
          if a.value != pa.value {
            return false;
          }
          *unified_out = TeName({a.value, None});
          return true;
        } else {
          return false;
        }
      }
    }

    case &TeApp(a te_typeapp): {
      // Generics can't be type constructors (yet).
      if case &TeApp(pa te_typeapp) = pt {
        unified_typefunc te_puretype;
        if !unify_puretypes(&a.typefunc, &pa.typefunc, &unified_typefunc) {
          return false;
        }
        a_params *shray[te_typeexpr] = &a.params;
        pa_params *shray[te_typeexpr] = &pa.params;
        n size = count(a_params);
        if n != count(pa_params) {
          return false;
        }
        unified_params array[te_typeexpr];
        reserve(&unified_params, n);
        for i size = 0; i < n; i = i + 1 {
          unified te_typeexpr;
          if !unify_under_generics(&pa_params[i], names, unif_parms, &a_params[i], &unified) {
            return false;
          }
          push(&unified_params, unified);
        }
        *unified_out = TeApp({unified_typefunc, freeze(&unified_params), None});
        return true;
      } else {
        return false;
      }
    }

    case &TeUnion(a te_union): {
      if case &TeUnion(pa te_union) = pt {
        n size = count(&a.fields);
        if n != count(&pa.fields) {
          return false;
        }
        unified_fields array[te_vardecl];
        for i size = 0; i < n; i = i + 1 {
          pd *te_vardecl = &pa.fields[i];
          d *te_vardecl = &a.fields[i];
          if pd->name != d->name {
            return false;
          }
          unified te_typeexpr;
          if !unify_under_generics(&pd->type, names, unif_parms, &d->type, &unified) {
            return false;
          }
          push(&unified_fields, {d->name, unified});
        }
        *unified_out = TeUnion({freeze(&unified_fields)});
        return true;
      } else {
        return false;
      }
    }

    case &TeArraytype(a te_arraytype): {
      if case &TeArraytype(pa te_arraytype) = pt {
        unified_count opt[u32];
        if case Has(ac u32) = a.count {
          if case Has(pac u32) = pa.count {
            if ac != pac {
              return false;
            } else {
              unified_count = Has(ac);
            }
          } else {
            unified_count = Has(ac);
          }
        } else {
          unified_count = pa.count;
        }
        unified_type te_typeexpr;
        if !unify_under_generics(oo(&pa.param), names, unif_parms, oo(&a.param), &unified_type) {
          return false;
        }
        *unified_out = TeArraytype({unified_count, emshp(unified_type)});
        return true;
      } else {
        return false;
      }
    }

    case &TeLifetime(a te_lifetime):
      // NOTE: I mimicked the TeName case, and haven't fully thought out how that would
      // affect this function's callers, so treat this code with skepticism.
      if case Has(ix size) = lookup_lifetime_name(names, a.name) {
        unified te_typeexpr;
        if !unify_types(&unif_parms[ix], pt, &unified) {
          return false;
        }
        unif_parms[ix] = unified;
        *unified_out = TeLifetime({a.name});
        return true;
      } else {
        if case &TeLifetime(pa te_lifetime) = pt {
          // NOTE: The TeName case says something about scopage for its analogue of this
          // comparison.
          if a.name != pa.name {
            return false;
          }
          *unified_out = TeLifetime({a.name});
          return true;
        } else {
          return false;
        }
      }

    case &TeUnknown: {
      // Right now, the only callers are type_matches and unify_types.  From type_matches,
      // t is complete, and from unify_types, there are no generic names.
      check(count(names) == 0);
      *unified_out = *pt;
      return true;
    }
  }
}

func unify_puretypes(ppta *te_puretype, pptb *te_puretype, out *te_puretype) bool {
  switch ppta {
    case &TePureName(as sym): {
      switch pptb {
        case &TePureName(bs sym): {
          if as == bs {
            *out = TePureName(as);
            return true;
          } else {
            return false;
          }
        }
        case &TePureUnknown: {
          *out = *ppta;
          return true;
        }
      }
    }
    case &TePureUnknown: {
      *out = *pptb;
      return true;
    }
  }
}

func unify_types(pta *te_typeexpr, ptb *te_typeexpr, out *te_typeexpr) bool {
  names shray[te_generik];
  unif_parms array[te_typeexpr];
  return unify_under_generics(pta, &names, &unif_parms, ptb, out);
}
