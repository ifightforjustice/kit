        Kira v0.0000...1.x

At some future date, Kira will be a programming language.  Right
now, it's a work in progress.  Use build_windows.bat or
build_linux.sh to build it, or just pass *.c to your C compiler.
Then I recommend running

   out --test

to see if the tests pass.

Then, try running,

   cd examples
   ..\out foo
   cl main.c foo.obj
   main

to see things actually working.

Here's the project timeline:

   1. Parsing.  (DONE)
   2. Typechecking/name-resolving.  (DONE)
   3. Generate code, i.e. have a working compiler.  (DONE)
   3a. Support interior lambda expressions.
   3b. Support the stdcall calling convention.
   3c. Support exporting specific names for C interop. (DONE)
   4. Cleanup error messages to have useful source information. (BETTER)
   5. Cleanup the language to make it more usable. (in progress)
   5a. Array indexing through pointers. (DONE)
   5d. Tilde-conversion operator. (DONE)
   5e. An array type. (DONE)
   5g. i16, u16, i8 datatypes. (DONE)
   5h. Rename byte to u8. (DONE)
   5k. Pointer type syntax. (DONE)
   5o. Declare expression to be of type. (DONE)
   5p. While loops, for loops. (DONE)
   5s. Logical not operator. (DONE)
   5t. Array lookup should preserve the lvalueness of the array value. (DONE)
   5f. Bitwise not operator. (DONE) but ugh, ^.
   5b. Non-redundant function syntax.
   5c. Implicit conversions (for array->ptr, user-defined(?), and literals).
   5i. Analyze label & goto variable scopage. (DONE)
   5j. Constructors/destructors. (DONE and not completely ICKY)
   5l. Structure packing. (NO - see NOTE 5l.)
   5m. Tagged unions / enums.
   5n. Sizeof/alignof operator. (DONE)
   5q. Better void support, pointer arithmetic, proper treatment of zero-size entities.
   5r. Partial type syntax (var x = ...;  and  var x blah[_] = ...;  and  x :: foo[_])
   5u. String literal and character literal syntax.
   5v. Structure / array initialization syntax.
   5w. Explicit template param syntax in exprs. (DONE)
   5x. defclass, explicit conversions, access blocks. (DONE)
   6. Linux support.
   7. Make a self-hosted implementation (adding improvements and
      fixes to the C implementation when useful).
   8. ...

As of step 6, the language will be "C with templates and
constructors/destructors," essentially.  Future versions of the
language will be more advanced.


NOTE 5l.  Because types like "struct { fieldlist... }" can just
thrown around willy-nilly, everywhere, it would be kind of annoying
and dangerous to add structure packing now, because type checking
code would need to be adjusted.  So I won't add packing (to this
bootstrap compiler) until it's necessary.
