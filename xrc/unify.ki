import typeexpr;

struct unify_same_ipse {
  name1 sym;
  name2 sym;
}

enum unify_emission {
  SameIpse unify_same_ipse;
}

// t references the generic names in "names", whose corresponding values in "unif_parms"
// might be incomplete.  We update the values in unif_parms when necessary.  t does not
// need to be complete -- this code is also used by unify_types.
//
// "*unified_out" is initialized with the unified type, _except_ when t references a
// generic name, in which case it's initialized with the value of "*t", the generic name.
// (The reason is, we might not have gathered complete information about the generic
// parameter when we've halfway-processed the type -- the caller can and should
// reconstruct the correct values later.)
//
// _appends_ emissions onto emissions_append.
func unify_under_generics(scope *type_scope, unif_parms *array[te_typeexpr], pt *te_typeexpr,
                          names *shray[te_generik], t *te_typeexpr,
                          emissions_append *array[unify_emission],
                          unified_out *te_typeexpr) bool {
  if case &TeUnknown = pt {
    // It's worth pointing out:  This _is_ correct behavior if t is a generic parameter.
    *unified_out = *t;
    return true;
  }
  switch t {
    case &TeName(a te_name): {
      if case Has(ix size) = lookup_plain_name(names, a.value) {
        unified te_typeexpr;
        if !unify_types(scope, &unif_parms[ix], pt, emissions_append, &unified) {
          return false;
        }
        unif_parms[ix] = unified;
        *unified_out = TeName({a.value, None});
        return true;
      } else {
        if case &TeName(pa te_name) = pt {
          // NOTE: Naturally, at some point scopage might be a factor.
          if a.value != pa.value {
            return false;
          }
          *unified_out = TeName({a.value, None});
          return true;
        } else {
          return false;
        }
      }
    }

    case &TeApp(a te_typeapp): {
      // Generics can't be type constructors (yet).
      if case &TeApp(pa te_typeapp) = pt {
        unified_typefunc te_puretype;
        if !unify_puretypes(&a.typefunc, &pa.typefunc, &unified_typefunc) {
          return false;
        }
        a_params *shray[te_typeexpr] = &a.params;
        pa_params *shray[te_typeexpr] = &pa.params;
        n size = count(a_params);
        if n != count(pa_params) {
          return false;
        }
        unified_params array[te_typeexpr];
        reserve(&unified_params, n);
        for i size = 0; i < n; i = i + 1 {
          unified te_typeexpr;
          if !unify_under_generics(scope, unif_parms, &pa_params[i], names, &a_params[i], emissions_append, &unified) {
            return false;
          }
          push(&unified_params, unified);
        }
        *unified_out = TeApp({unified_typefunc, freeze(&unified_params), None});
        return true;
      } else {
        return false;
      }
    }

    case &TeUnion(a te_union): {
      if case &TeUnion(pa te_union) = pt {
        n size = count(&a.fields);
        if n != count(&pa.fields) {
          return false;
        }
        unified_fields array[te_vardecl];
        for i size = 0; i < n; i = i + 1 {
          pd *te_vardecl = &pa.fields[i];
          d *te_vardecl = &a.fields[i];
          if pd->name != d->name {
            return false;
          }
          unified te_typeexpr;
          if !unify_under_generics(scope, unif_parms, &pd->type, names, &d->type, emissions_append, &unified) {
            return false;
          }
          push(&unified_fields, {d->name, unified});
        }
        *unified_out = TeUnion({freeze(&unified_fields)});
        return true;
      } else {
        return false;
      }
    }

    case &TeArraytype(a te_arraytype): {
      if case &TeArraytype(pa te_arraytype) = pt {
        unified_count opt[u32];
        if case Has(ac u32) = a.count {
          if case Has(pac u32) = pa.count {
            if ac != pac {
              return false;
            } else {
              unified_count = Has(ac);
            }
          } else {
            unified_count = Has(ac);
          }
        } else {
          unified_count = pa.count;
        }
        unified_type te_typeexpr;
        if !unify_under_generics(scope, unif_parms, oo(&pa.param), names, oo(&a.param), emissions_append, &unified_type) {
          return false;
        }
        *unified_out = TeArraytype({unified_count, emshp(unified_type)});
        return true;
      } else {
        return false;
      }
    }

    case &TeIpse(a te_ipse):
      // NOTE: I mimicked the TeName case, and haven't fully thought out how that would
      // affect this function's callers, so treat this code with skepticism.
      if case Has(ix size) = lookup_ipse_name(names, a.name) {
        // SCOPE(): We don't actually use the generik oftype at all!
        unified te_typeexpr;
        if !unify_types(scope, &unif_parms[ix], pt, emissions_append, &unified) {
          return false;
        }
        unif_parms[ix] = unified;
        *unified_out = TeIpse({a.name});
        return true;
      } else {
        if case &TeIpse(pa te_ipse) = pt {
          // NOTE: Beware scopage, as with TeName, when that becomes a factor.
          if a.name != pa.name {
            a_oftype cu_typeexpr = scope_lookup(scope, a.name);
            pa_oftype cu_typeexpr = scope_lookup(scope, pa.name);
            // If a.name isn't in "names", it cannot have an oftype that references "names".  So we can just use unify_types.  I mean generally a cu_typeexpr can't reference "names", so if they types share the same local scope, ditto, we already replaced its generics and cac'd the oftype.

            // unified_oftype is unnecessary, we're unifying complete types just to check equivalence.
            unified_oftype te_typeexpr;
            if !unify_types(scope, &a_oftype.x, &pa_oftype.x, emissions_append, &unified_oftype) {
              return false;
            }

            push(emissions_append, @[unify_emission]SameIpse({a.name, pa.name}));
          } else {
            // Just to assert the scope actually has the name.
            discard cu_typeexpr = scope_lookup(scope, a.name);
          }
          *unified_out = TeIpse({a.name});
          return true;
        } else {
          return false;
        }
      }

    case &TeUnknown: {
      // Right now, the only callers are type_matches and unify_types.  From type_matches,
      // t is complete, and from unify_types, there are no generic names.
      check(count(names) == 0);
      *unified_out = *pt;
      return true;
    }
  }
}

func unify_puretypes(ppta *te_puretype, pptb *te_puretype, out *te_puretype) bool {
  switch ppta {
  case &TePureName(as sym):
    switch pptb {
    case &TePureName(bs sym):
      if as == bs {
        *out = TePureName(as);
        return true;
      } else {
        return false;
      }
    case &TePureUnknown:
      *out = *ppta;
      return true;
    }
  case &TePureUnknown:
    *out = *pptb;
    return true;
  }
}

func unify_types(scope *type_scope, pta *te_typeexpr, ptb *te_typeexpr, emissions_append *array[unify_emission], out *te_typeexpr) bool {
  names shray[te_generik];
  unif_parms array[te_typeexpr];
  return unify_under_generics(scope, &unif_parms, pta, &names, ptb, emissions_append, out);
}

func unifies(complete *te_typeexpr, pt *te_typeexpr) bool {
  unified te_typeexpr;
  emissions array[unify_emission];
  // There shouldn't be lifetimes looking up scope (right?), since we don't care about emissions.
  scope type_scope;
  if unify_types(&scope, complete, pt, &emissions, &unified) {
    check(empty(&emissions));
    return true;
  } else {
    return false;
  }
}

struct type_matches_precisely {
  // Complete types for all the template/generic names.
  parms_types shray[te_typeexpr];
  emissions shray[unify_emission];
}

enum type_matches_res {
  TypeDoesNotMatch void;
  TypeMatchesAmbiguously void;
  TypeMatchesPrecisely type_matches_precisely;
}

// t is complete, but it references the generic names in "names", whose corresponding
// values in "parms" could be incomplete.  pt is the partial type of an expression we're
// matching against this generic definition.  count(parms) == count(names).
func type_matches(scope *type_scope, parms *shray[te_typeexpr], pt *te_typeexpr, names *shray[te_generik],
                  t *te_typeexpr) type_matches_res {
  check(count(names) == count(parms));
  // We need to retain all new information we gain about the value of the generic param
  // typeexprs as we compare the whole type, in order to make sure we don't match
  // conflicting information about a generic parameter.
  unif_parms array[te_typeexpr] = mk_copy(parms);
  // Since t is complete, unified is irrelevant and must be identical to t.
  unified te_typeexpr;
  emissions array[unify_emission];
  if !unify_under_generics(scope, &unif_parms, pt, names, t, &emissions, &unified) {
    return TypeDoesNotMatch;
  }
  frozen_unif_parms shray[te_typeexpr] = freeze(&unif_parms);
  if all_complete_computed(&frozen_unif_parms).complete {
    return TypeMatchesPrecisely({frozen_unif_parms, freeze(&emissions)});
  } else {
    return TypeMatchesAmbiguously;
  }
}
