import array;

extern malloc fn[size, *void];
extern free fn[*void, void];
extern abort fn[void];
defclass FILE void;
extern Stdout fn[*FILE];
extern Stdin fn[*FILE];
extern Stderr fn[*FILE];
extern putchar fn[i32, i32];
// buffer, size, count, stream
extern fread fn[*void, size, size, *FILE, size];
extern fwrite fn[*void, size, size, *FILE, size];
// TODO: Add "int" as a built-in?  "c_int"?
extern fclose fn[*FILE, i32];  // TODO: actually returns "int"
extern feof fn[*FILE, i32];  // TODO: actually returns "int"
// TODO: Add "char" as a built-in?
extern fopen fn[*u8, *u8, *FILE];
extern fflush fn[*FILE, i32];   // TODO: actually returns "int"
// TODO: Add platform-specific tests for stuff like "is EOF -1"
def EOF i32 = -1;  // TODO: is actually "int"
// TODO: fseek takes a "long".

func print(fp *FILE, arr array[u8]) void {
  c size = count(&arr);
  fwrite(@[*void]cast(data(&arr)), sizeof@[u8], count(&arr), fp);
}

func print(fp *FILE, arr1 array[u8], arr2 array[u8]) void {
  print(fp, arr1);
  print(fp, arr2);
}

func[T] debugstr(arr T) void {
  fwrite(cast(@[*u8]&arr[0]), sizeof@[u8], arr.length, Stderr());
  fflush(Stderr());
}

func[T] build_u8str(r *array[u8], x **T) void {
  u union { p *void; x size; };
  u.p = cast(x);
  append(r, as_hex(u.x));
}

func build_u8str(r *array[u8], x *bool) void {
  if *x {
    append(r, _u8("true"));
  } else {
    append(r, _u8("false"));
  }
}

func build_u8str(r *array[u8], x *u32) void {
  append(r, unsigned_as_dec(*x));
}

func build_u8str(r *array[u8], x *size) void {
  append(r, unsigned_as_dec(*x));
}

func as_hex(x size) array[u8] {
  arr array[u8];
  if x == 0 {
    push(&arr, '0');
    return arr;
  }
  while x != 0 {
    units size = x % 16;
    ch u8;
    if units < 10 {
      ch = ~(units + '0');
    } else {
      ch = ~((units - 10) + 'a');
    }
    push(&arr, ch);
    x = x / 16;
  }
  return reverse(&arr);
}

func[T] unsigned_as_dec(x T) array[u8] {
  arr array[u8];
  if x == 0 {
    push(&arr, '0');
    return arr;
  }
  while x != 0 {
    units T = x % 10;
    ch u8 = ~(units + '0');
    push(&arr, ch);
    x = x / 10;
  }
  return reverse(&arr);
}

func[T] printerr(x array[u8], y T) void {
  print(Stderr(), x);
  print(Stderr(), to_u8str(y));
  print(Stderr(), make("\n"));
  fflush(Stderr());
}

func[T] to_u8str(x T) array[u8] {
  ret array[u8];
  build_u8str(&ret, &x);
  return ret;
}

func checkmalloc(n size) *void {
  n = max(n, 1);
  ret *void = malloc(n);
  check(ret != null);
  return ret;
}

// TODO: We should not need uses of this.
func[T] fake() T {
  ret T;
  return ret;
}

defenum[T] opt {
  None void;
  Has T;
};

func[T] None() opt[T] {
  return None(void);
}

func[T] isHas(p *opt[T]) bool {
  if case &Has(x) = p {
    return true;
  }
  return false;
}

func[T] isNone(p *opt[T]) bool {
  if case &None(v void) = p {
    return true;
  }
  return false;
}

func[T] `==`(x opt[T], y opt[T]) bool {
  switch &x {
    case &None(v): {
      if case &None(u) = &y { return true; }
    }
    case &Has(a T): {
      if case &Has(b T) = &y {
        return a == b;
      }
    }
  }
  return false;
}

deftype[S, T] tup struct {
  car S;
  cdr T;
};

func[S, T] cons(s S, t T) tup[S, T] {
  ret tup[S, T];
  ret.car = s;
  ret.cdr = t;
  return ret;
}

func[S, T] build_u8str(r *array[u8], p *tup[S, T]) void {
  build_u8str(r, &p->car);
  build_u8str(r, &p->cdr);
}

func[S, T] wrapconvert(x T) S {
  ret S;
  ret.~ = x;
  return ret;
}

func[S, T] wrapequate(x S, y T) bool {
  return x.~ == y.~;
}

func[T] default() T {
  ret T;
  return ret;
}

func[T] TODO() T {
  print(Stderr(), _u8("TODO()\n"));
  fflush(Stderr());
  return default();
}

func check(x bool) void {
  if !x { abort(); }
}

func crash(msg array[u8]) void {
  print(Stderr(), msg, make("\n"));
  fflush(Stderr());
  abort();
}

func[T] check_mutate(p *T, old T, new T) void {
  check(*p == old);
  *p = new;
}

func[T] max(x T, y T) T {
  if (x < y) {
    return y;
  } else {
    return x;
  }
}

func[S, T] cast(p *S) *T {
  u union { p *S; q *T; };
  u.p = p;
  return u.q;
}

func[S, T] up(s S) T {
  ret T;
  ret.~ = s;
  return ret;
}

def U32_MAX u32 = ^(@[u32]0);

func try_mul(x u32, y u32, out *u32) bool {
  if y != 0 && U32_MAX / y < x {
    return false;
  }
  *out = x * y;
  return true;
}

func try_add(x u32, y u32, out *u32) bool {
  if U32_MAX - y < x {
    return false;
  }
  *out = x + y;
  return true;
}

func ceil_aligned(x u32, y u32) u32 {
  if x % y == 0 {
    return x;
  }
  return x + (y - x % y);
}

// TODO: This is... platform-specific.
func[T] enumnum(x *T) u32 {
  return * @[*u32]cast(x);
}

