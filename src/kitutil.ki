import stdlib;
import state;

func[T] DBG(x T) void { ERR(x); }
func[T, U] DBG(x T, y U) void { ERR(x, y); }
func[T, U, V] DBG(x T, y U, z V) void { ERR(x, y, z); }
func[T, U, V, W] DBG(x T, y U, z V, p W) void { ERR(x, y, z, p); }
func[T, U, V, W, X] DBG(x T, y U, z V, p W, q X) void { ERR(x, y, z, p, q); }
func[T, U, V, W, X, Y] DBG(x T, y U, z V, p W, q X, r Y) void { ERR(x, y, z, p, q, r); }
func[T, U, V, W, X, Y, Z] DBG(x T, y U, z V, p W, q X, r Y, s Z) void { ERR(x, y, z, p, q, r, s); }
func[T, U, V, W, X, Y, Z, A] DBG(x T, y U, z V, p W, q X, r Y, s Z, t A) void { ERR(x, y, z, p, q, r, s, t); }


func[T, U, V, W, X, Y, Z, A] ERR(x T, y U, z V, p W, q X, r Y, s Z, t A) void {
  ERR(cons(cons(cons(x, y), cons(z, p)), cons(cons(q, r), cons(s, t))));
}

func[T, U, V, W, X, Y, Z] ERR(x T, y U, z V, p W, q X, r Y, s Z) void {
  ERR(cons(cons(cons(x, y), cons(z, p)), cons(cons(q, r), s)));
}

func[T, U, V, W, X, Y] ERR(x T, y U, z V, p W, q X, r Y) void {
  ERR(cons(cons(cons(x, y), cons(z, p)), cons(q, r)));
}

func[T, U, V, W, X] ERR(x T, y U, z V, p W, q X) void {
  ERR(cons(cons(cons(x, y), cons(z, p)), q));
}

func[T, U, V, W] ERR(x T, y U, z V, p W) void {
  ERR(cons(cons(x, y), cons(z, p)));
}

func[T, U, V] ERR(x T, y U, z V) void {
  ERR(cons(cons(x, y), z));
}

func[T, U] ERR(x T, y U) void {
  ERR(cons(x, y));
}

func[T] ERR(x T) void {
  r array[u8];
  build_u8str(void, &r, &x);
  push(&r, '\n');
  print(Stderr(), r);
  fflush(Stderr());
}

func[T, U, V, W, X, Y, Z, A] MERR(cs *checkstate, m ast_meta, x T, y U, z V, p W, q X, r Y, s Z, t A) void {
  MERR(cs, m, cons(cons(cons(x, y), cons(z, p)), cons(cons(q, r), cons(s, t))));
}

func[T, U, V, W, X, Y, Z] MERR(cs *checkstate, m ast_meta, x T, y U, z V, p W, q X, r Y, s Z) void {
  MERR(cs, m, cons(cons(cons(x, y), cons(z, p)), cons(cons(q, r), s)));
}

func[T, U, V, W, X, Y] MERR(cs *checkstate, m ast_meta, x T, y U, z V, p W, q X, r Y) void {
  MERR(cs, m, cons(cons(cons(x, y), cons(z, p)), cons(q, r)));
}

func[T, U, V, W, X] MERR(cs *checkstate, m ast_meta, x T, y U, z V, p W, q X) void {
  MERR(cs, m, cons(cons(cons(x, y), cons(z, p)), q));
}

func[T, U, V, W] MERR(cs *checkstate, m ast_meta, x T, y U, z V, p W) void {
  MERR(cs, m, cons(cons(x, y), cons(z, p)));
}

func[T, U, V] MERR(cs *checkstate, m ast_meta, x T, y U, z V) void {
  MERR(cs, m, cons(cons(x, y), z));
}

func[T, U] MERR(cs *checkstate, m ast_meta, x T, y U) void {
  MERR(cs, m, cons(x, y));
}

func[T] MERR(cs *checkstate, m ast_meta, x T) void {
  r array[u8];
  if case Has(p pos) = ref(&cs->posits.metas, m.~)->left {
    hp human_pos = to_human_pos(cs, p);
    build_u8str(cs->im, &r, &hp);
    append(&r, _u8(": "));
  } else {
    append(&r, _u8("At ??: "));
  }
  build_u8str(cs->im, &r, &x);
  push(&r, '\n');
  print(Stderr(), r);
  fflush(Stderr());
}

func[T] ice(x T) void {
  ERR(_u8("ICE: "), x);
  abort();
}

func[T, U] ice(x T, y U) void {
  ERR(_u8("ICE: "), x, y);
  abort();
}

func[T, U, V] ice(x T, y U, z V) void {
  ERR(_u8("ICE: "), x, y, z);
  abort();
}

func[T, U, V, W] ice(x T, y U, z V, p W) void {
  ERR(_u8("ICE: "), x, y, z, p);
  abort();
}

func[T, U, V, W, X] ice(x T, y U, z V, p W, q X) void {
  ERR(_u8("ICE: "), x, y, z, p, q);
  abort();
}

func[T, U, V, W, X, Y] ice(x T, y U, z V, p W, q X, r Y) void {
  ERR(_u8("ICE: "), x, y, z, p, q, r);
  abort();
}

func[T, U, V, W, X, Y, Z] ice(x T, y U, z V, p W, q X, r Y, s Z) void {
  ERR(_u8("ICE: "), x, y, z, p, q, r, s);
  abort();
}
