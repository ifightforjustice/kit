import arity;
import identmap;
import pos;
import uniq;

deftype ast_meta struct {
  pos_start pos;
  pos_end pos;
};

deftype ast_ident struct {
  meta ast_meta;
  value ident_value;
};

deftype ast_hex_literal struct {
  meta ast_meta;
  digits array[i8];
};

deftype ast_dec_literal struct {
  meta ast_meta;
  digits array[i8];
};

defenum ast_numeric_literal {
  HexLiteral ast_hex_literal;
  DecLiteral ast_dec_literal;
};

deftype ast_bool_literal struct {
  meta ast_meta;
  value bool;
};

deftype ast_charspec struct {
  meta ast_meta;
  value u8;
};

deftype ast_char_literal struct {
  meta ast_meta;
  charspec ast_charspec;
};

deftype ast_string_literal struct {
  meta ast_meta;
  charspecs array[ast_charspec];
};

deftype ast_funcall struct {
  meta ast_meta;
  func uniq[ast_expr];
  args array[ast_expr];
};

deftype ast_typeapp struct {
  meta ast_meta;
  name ast_ident;
  params array[ast_typeexpr];
};

deftype ast_structe struct {
  meta ast_meta;
  fields array[ast_vardecl];
};

deftype ast_unione struct {
  meta ast_meta;
  fields array[ast_vardecl];
};

deftype ast_arraytype struct {
  meta ast_meta;
  count uniq[ast_expr];
  param uniq[ast_typeexpr];
};

deftype ast_unknown struct {
  meta ast_meta;
};

defenum ast_typeexpr {
  Name ast_ident;
  App ast_typeapp;
  Structe ast_structe;
  Unione ast_unione;
  Arraytype ast_arraytype;
  // "Complete" types don't have these fields.
  Unknown ast_unknown;
  /* TODO: We have an ast_unknown field because...?  We have no
  metadata, there are no numeric expressions. */
  Numeric ast_unknown;
};

func ast_typeexpr_meta(a ast_typeexpr) ast_meta {
  switch a {
    case Name(v): { return v.meta; }
    case App(v): { return v.meta; }
    case Structe(v): { return v.meta; }
    case Unione(v): { return v.meta; }
    case Arraytype(v): { return v.meta; }
    case Unknown(v): { return v.meta; }
    case Numeric(v): { return v.meta; }
  }
}

deftype ast_vardecl struct {
  meta ast_meta;
  name ast_ident;
  type ast_typeexpr;
};

deftype ast_bracebody struct {
  meta ast_meta;
  statements array[ast_statement];
};

deftype ast_var_statement struct {
  meta ast_meta;
  decl ast_vardecl;
  rhs opt[uniq[ast_expr]];
};

deftype ast_ifthen_statement struct {
  meta ast_meta;
  condition uniq[ast_expr];
  body ast_bracebody;
};

deftype ast_ifthenelse_statement struct {
  meta ast_meta;
  condition uniq[ast_expr];
  thenbody ast_bracebody;
  elsebody ast_bracebody;
};

deftype ast_while_statement struct {
  meta ast_meta;
  condition uniq[ast_expr];
  body ast_bracebody;
};

deftype ast_for_statement struct {
  meta ast_meta;
  // Can only be an ast_expr or ast_statement_var. */
  initializer opt[uniq[ast_statement]];
  condition opt[uniq[ast_expr]];
  increment opt[uniq[ast_expr]];
  body ast_bracebody;
};

deftype ast_switch_statement struct {
  meta ast_meta;
  swartch uniq[ast_expr];
  cased_statements array[ast_cased_statement];
};

deftype ast_return_statement struct {
  meta ast_meta;
  // If no expr, it returns void.
  expr opt[uniq[ast_expr]];
};

defenum ast_statement {
  Expr ast_expr;
  Return ast_return_statement;
  Var ast_var_statement;
  IfThen ast_ifthen_statement;
  IfThenElse ast_ifthenelse_statement;
  While ast_while_statement;
  For ast_for_statement;
  Switch ast_switch_statement;
};

deftype ast_case_pattern struct {
  meta ast_meta;
  constructor_name ast_ident;
  decl ast_vardecl;
};

// TODO: Rename.
deftype ast_cased_statement struct {
  meta ast_meta;
  pattern ast_case_pattern;
  body ast_bracebody;
};

deftype ast_lambda struct {
  meta ast_meta;
  params array[ast_vardecl];
  return_type ast_typeexpr;
  // TODO: Rename field to body.
  bracebody ast_bracebody;
};

defenum ast_unop {
  UnopDereference void;
  UnopAddressof void;
};

deftype ast_unop_expr struct {
  meta ast_meta;
  operator ast_unop;
  rhs uniq[ast_expr];
};

defenum ast_binop {
  BinopAssign void;
  BinopLogicalOr void;
  BinopLogicalAnd void;
};

deftype ast_binop_expr struct {
  meta ast_meta;
  operator ast_binop;
  lhs uniq[ast_expr];
  rhs uniq[ast_expr];
};

defenum ast_fieldname {
  WholeField void;
  NameField ast_ident;
};

deftype ast_local_field struct {
  meta ast_meta;
  lhs uniq[ast_expr];
  fieldname ast_fieldname;
};

deftype ast_deref_field struct {
  meta ast_meta;
  lhs uniq[ast_expr];
  fieldname ast_fieldname;
};

deftype ast_name_expr struct {
  meta ast_meta;
  ident ast_ident;
  generic_params opt[array[ast_typeexpr]];
};

deftype ast_index_expr struct {
  meta ast_meta;
  lhs uniq[ast_expr];
  rhs uniq[ast_expr];
};

deftype ast_typed_expr struct {
  meta ast_meta;
  type ast_typeexpr;
  expr uniq[ast_expr];
};

defenum ast_expr {
  NameExpr ast_name_expr;
  NumericLiteral ast_numeric_literal;
  BoolLiteral ast_bool_literal;
  CharLiteral ast_char_literal;
  StringLiteral ast_string_literal;
  Funcall ast_funcall;
  IndexExpr ast_index_expr;
  UnopExpr ast_unop_expr;
  BinopExpr ast_binop_expr;
  Lambda ast_lambda;
  LocalField ast_local_field;
  DerefField ast_deref_field;
  TypedExpr ast_typed_expr;
};

defenum ast_generics {
  NoGenerics void;
  HasGenerics array[ast_ident];
};

deftype ast_def struct {
  meta ast_meta;
  is_export bool;
  generics ast_generics;
  name ast_ident;
  typeexpr opt[ast_typeexpr];
  rhs ast_expr;
};

deftype ast_extern_def struct {
  meta ast_meta;
  name ast_ident;
  type ast_typeexpr;
};

deftype ast_import struct {
  meta ast_meta;
  name ast_ident;
};

deftype ast_enumspec struct {
  enumfields array[ast_vardecl];
};

defenum ast_deftype_rhs {
  TypeexprRhs ast_typeexpr;
  EnumSpecRhs ast_enumspec;
};

defenum ast_deftype_disposition {
  DispositionNotClass void;
  DispositionClassDefaultCopyMoveDestroy void;
  DispositionClassDefaultMove void;
  DispositionClassNoDefaults void;
};

// TODO: This is gross.
deftype ast_deftype struct {
  meta ast_meta;
  disposition ast_deftype_disposition;
  generics ast_generics;
  name ast_ident;
  rhs ast_deftype_rhs;
};

deftype ast_access struct {
  meta ast_meta;
  name ast_ident;
  arity generics_arity;
  toplevels array[ast_toplevel];
};

defenum ast_toplevel {
  import ast_import;
  def ast_def;
  extern_def ast_extern_def;
  deftype ast_deftype;
  access ast_access;
};

deftype ast_file struct {
  toplevels array[ast_toplevel];
};

