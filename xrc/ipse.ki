import state;

// This file's a grab-bag for ipse type related stuff.  Probably most of it should be
// moved to other files and this should go away.

// I suspect instpacks might require ipse type name mapping information, so this is a
// placeholder.
func canonicalized_pack(pack *te_instpack) te_instpack {
  return *pack;
}

func canonicalized_ipse_sym(ctx *canonicalizing_ctx, s sym) sym {
  if case Has(ix size) = find(ctx->ipse_names_app, s) {
    return make_canonicalized_ipse_name(ctx->im, ix);
  } else {
    n size = count(ctx->ipse_names_app);
    push(ctx->ipse_names_app, s);
    ret sym = make_canonicalized_ipse_name(ctx->im, n);
    scope_add(ctx->canonicalized_scope_app, ret, scope_lookup(ctx->scope, s));
    return ret;
  }
}

func canonicalized_app_pack(ctx *canonicalizing_ctx, pack *te_app_pack) te_app_pack {
  return {pack->teip};
}

func canonicalize_arraytype_count(a *opt[u32]) opt[u32] {
  return *a;
}

func make_canonicalized_ipse_name(im *identmap, ix size) sym {
  b array[u8];
  push(&b, '$');
  build_u8str(void, &b, &ix);
  return intern(im, from_u8(&b));
}

struct canonicalizing_ctx {
  im *identmap;
  scope *type_scope;
  ipse_names_app *array[sym];
  canonicalized_scope_app *type_scope;
}

func canonicalize_idy_ipses(ctx *canonicalizing_ctx, t *te_typeexpr) te_typeexpr {
  switch t {
  case &TeName(a te_name):
    return TeName({a.value, Has!canonicalized_pack(unHas!&a.pack)});
  case &TeApp(a te_app):
    newparams array[te_typeexpr];
    nparams size = count(&a.params);
    for i size = 0; i < nparams; i = i + 1 {
      push(&newparams, canonicalize_idy_ipses(ctx, &a.params[i]));
    }
    return TeApp({a.typefunc, freeze(&newparams), Has!canonicalized_app_pack(ctx, unHas!&a.pack)});
  case &TeUnion(a te_union):
    // Honestly, a union having ipses would be pretty weird.
    return TeUnion({canonicalize_idy_vardecls(ctx, &a.fields)});
  case &TeArraytype(a te_arraytype):
    count opt[u32] = canonicalize_arraytype_count(&a.count);
    return TeArraytype({count, emshp(canonicalize_idy_ipses(ctx, oo(&a.param)))});
  case &TeUnknown:
    ice(_u8("canonicalize_idy_ipses sees TeUnknown."));
    return fake();
  }
}

func canonicalize_idy_vardecls(ctx *canonicalizing_ctx, a *shray[te_vardecl]) shray[te_vardecl] {
  build array[te_vardecl];
  n size = count(a);
  for i size = 0; i < n; i = i + 1 {
    push(&build, {a[i].name, canonicalize_idy_ipses(ctx, &a[i].type)});
  }
  return freeze(&build);
}
