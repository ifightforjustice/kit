        Kira v0.0000...1.x

At some future date, Kira will be a programming language.  Right
now, it's a work in progress.  Use build_windows.bat or
build_linux.sh to build it, or just pass *.c to your C compiler.
Then I recommend running

   out --test

to see if the tests pass.

Then, try running,

   cd examples
   ..\out foo
   cl main.c foo.obj
   main

to see things actually working.

Here's the project timeline:

   1. Parsing.  (DONE)
   2. Typechecking/name-resolving.  (DONE)
   3. Generate code, i.e. have a working compiler.  (DONE)
   3a. Support interior lambda expressions.
   3b. Support the stdcall calling convention.
   4. Cleanup error messages to have useful source information. (BETTER)
   5. Cleanup the language to make it more usable. (in progress)
   5a. Array indexing through pointers. (DONE)
   5b. Non-redundant function syntax.
   5c. Implicit conversions (for array->ptr, user-defined(?), and literals).
   5d. Tilde-conversion operator. (DONE)
   5e. An array type. (DONE)
   5f. Bitwise not operator.
   5g. i16, u16, i8 datatypes. (DONE)
   5h. Rename byte to u8. (DONE)
   5i. Analyze label & goto variable scopage.
   5j. Constructors/destructors.
   5k. Pointer type syntax.
   5l. Structure packing.
   5m. Tagged unions / enums.
   5n. Sizeof/alignof operator.
   5o. Declare expression to be of type. (DONE)
   5p. While loops (DONE), for loops.
   5q. Better void support, pointer arithmetic, proper treatment of zero-size entities.
   5r. Partial type syntax (var x = ...;  and  var x blah[_] = ...;  and  x :: foo[_])
   6. Linux support.
   7. Make a self-hosted implementation (adding improvements and
      fixes to the C implementation when useful).
   8. ...

As of step 6, the language will be "C with templates and RAII,"
essentially.  Future versions of the language will be more
advanced.
