import arity;
import identmap;
import pos;
import box;

// This is an index into some ps-specific structure.
deftype ast_meta size;

def `~` fn[size, ast_meta] = wrapconvert;

deftype interval struct {
  left pos;
  right pos;
};

deftype ast_ident struct {
  meta ast_meta;
  value ident_value;
};

// Add pos info below.

deftype ast_hex_literal struct {
  meta ast_meta;
  digits array[i8];
};

deftype ast_dec_literal struct {
  meta ast_meta;
  digits array[i8];
};

defenum ast_numeric_literal {
  HexLiteral ast_hex_literal;
  DecLiteral ast_dec_literal;
};

deftype ast_bool_literal struct {
  meta ast_meta;
  value bool;
};

deftype ast_void_literal struct {
  meta ast_meta;
};

deftype ast_null_literal struct {
  meta ast_meta;
};

deftype ast_charspec struct {
  value i32;
};

deftype ast_char_literal struct {
  charspec ast_charspec;
};

deftype ast_string_literal struct {
  charspecs array[ast_charspec];
};

deftype ast_funcall struct {
  fun box[ast_expr];
  params array[ast_expr];
};

deftype ast_typeapp struct {
  typefunc box[ast_typeexpr];
  params array[ast_typeexpr];
};

deftype ast_struct struct {
  fields array[ast_vardecl];
};

deftype ast_enum struct {
  constructors array[ast_vardecl];
};

deftype ast_union struct {
  fields array[ast_vardecl];
};

deftype ast_arraytype struct {
  count opt[box[ast_expr]];
  param box[ast_typeexpr];
};

deftype ast_unknown struct {
};

defenum ast_typeexpr {
  Name ast_ident;
  App ast_typeapp;
  Struct ast_struct;
  Enum ast_enum;
  Union ast_union;
  Arraytype ast_arraytype;
  Unknown ast_unknown;
};

deftype ast_vardecl struct {
  name ast_ident;
  type ast_typeexpr;
};

deftype ast_bracebody struct {
  statements array[ast_statement];
};

deftype ast_var_statement struct {
  decl ast_vardecl;
  rhs opt[box[ast_expr]];
};

deftype ast_ifthen_statement struct {
  condition box[ast_expr];
  body ast_bracebody;
};

deftype ast_ifthenelse_statement struct {
  condition box[ast_expr];
  thenbody ast_bracebody;
  elsebody ast_bracebody;
};

deftype ast_while_statement struct {
  condition box[ast_expr];
  body ast_bracebody;
};

deftype ast_for_statement struct {
  // Can only be an ast_expr or ast_statement_var.
  initializer opt[box[ast_statement]];
  condition opt[box[ast_expr]];
  increment opt[box[ast_expr]];
  body ast_bracebody;
};

deftype ast_switch_statement struct {
  swartch box[ast_expr];
  cases array[ast_switch_case];
};

deftype ast_return_statement struct {
  // If no expr, it returns void.
  expr opt[box[ast_expr]];
};

deftype ast_label_statement struct {
  name ast_ident;
};

deftype ast_goto_statement struct {
  target ast_ident;
};

defenum ast_statement {
  Expr ast_expr;
  Return ast_return_statement;
  Var ast_var_statement;
  IfThen ast_ifthen_statement;
  IfThenElse ast_ifthenelse_statement;
  While ast_while_statement;
  For ast_for_statement;
  Switch ast_switch_statement;
  Label ast_label_statement;
  Goto ast_goto_statement;
};

defenum ast_case_pattern {
  Case struct {
    constructor_name ast_ident;
    decl ast_vardecl;
  };
  Default void;
};

deftype ast_switch_case struct {
  pattern ast_case_pattern;
  body ast_bracebody;
};

deftype ast_lambda struct {
  args array[ast_vardecl];
  return_type ast_typeexpr;
  body ast_bracebody;
};

defenum ast_fieldname {
  WholeField void;
  NameField ast_ident;
};

deftype ast_local_field struct {
  lhs box[ast_expr];
  fieldname ast_fieldname;
};

deftype ast_deref_field struct {
  lhs box[ast_expr];
  fieldname ast_fieldname;
};

deftype ast_name_expr struct {
  ident ast_ident;
  generic_params opt[array[ast_typeexpr]];
};

deftype ast_paren_expr struct {
  expr box[ast_expr];
};

deftype ast_index_expr struct {
  lhs box[ast_expr];
  rhs box[ast_expr];
};

deftype ast_typed_expr struct {
  type ast_typeexpr;
  expr box[ast_expr];
};

deftype ast_strinit struct {
  exprs array[ast_expr];
};

defenum ast_expr {
  NameExpr ast_name_expr;
  ParenExpr ast_paren_expr;
  NumericLiteral ast_numeric_literal;
  BoolLiteral ast_bool_literal;
  VoidLiteral ast_void_literal;
  NullLiteral ast_null_literal;
  CharLiteral ast_char_literal;
  StringLiteral ast_string_literal;
  Funcall ast_funcall;
  IndexExpr ast_index_expr;
  Lambda ast_lambda;
  LocalField ast_local_field;
  DerefField ast_deref_field;
  TypedExpr ast_typed_expr;
  Strinit ast_strinit;
};

defenum ast_generics {
  NoGenerics void;
  HasGenerics array[ast_ident];
};

defenum ast_isexport {
  IsExport void;
  IsNotExport void;
};

defenum ast_isvar {
  IsVar void;
  IsNotVar void;
};

deftype ast_def struct {
  is_export ast_isexport;
  is_var ast_isvar;
  generics ast_generics;
  name ast_ident;
  typeexpr opt[ast_typeexpr];
  rhs ast_expr;
};

deftype ast_extern_def struct {
  name ast_ident;
  type ast_typeexpr;
};

deftype ast_import struct {
  name ast_ident;
};

defenum ast_defclass_disposition {
  DefaultCopyMoveDestroy void;
  DefaultMove void;
  NoDefaults void;
};

defenum ast_type_def_rhs {
  TypeexprRhs ast_typeexpr;
  ClassexprRhs struct {
    disposition ast_defclass_disposition;
    rhs_type ast_typeexpr;
  };
};

deftype ast_type_def struct {
  generics ast_generics;
  name ast_ident;
  rhs ast_type_def_rhs;
};

deftype ast_type_alias struct {
  generics ast_generics;
  name ast_ident;
  rhs ast_typeexpr;
};

deftype ast_access struct {
  name ast_ident;
  arity generics_arity;
  toplevels array[ast_toplevel];
};

defenum ast_toplevel {
  Import ast_import;
  Def ast_def;
  ExternDef ast_extern_def;
  TypeDef ast_type_def;
  TypeAlias ast_type_alias;
  Access ast_access;
};

deftype ast_file struct {
  toplevels array[ast_toplevel];
};

