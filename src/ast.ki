import arity;
import box;
import identmap;
import pos;
import typeexpr;

// This is an index into some ps-specific structure.
deftype ast_meta size;

def `~` fn[size, ast_meta] = wrapconvert;

func fake_ast_meta() ast_meta { return default(); }

deftype interval struct {
  left pos;
  right pos;
};

deftype ast_ident struct {
  meta ast_meta;
  value sym;
};

// Add pos info below.

deftype ast_hex_literal struct {
  meta ast_meta;
  digits array[i8];
};

deftype ast_dec_literal struct {
  meta ast_meta;
  digits array[i8];
};

defenum ast_numeric_literal {
  HexLiteral ast_hex_literal;
  DecLiteral ast_dec_literal;
};

deftype ast_bool_literal struct {
  meta ast_meta;
  value bool;
};

deftype ast_void_literal struct {
  meta ast_meta;
};

deftype ast_null_literal struct {
  meta ast_meta;
};

deftype ast_charspec struct {
  value i32;
};

deftype ast_char_literal struct {
  charspec ast_charspec;
};

deftype ast_string_literal struct {
  charspecs array[ast_charspec];
};

deftype ast_funcall struct {
  fun box[ast_expr];
  params array[ast_expr];
};

deftype ast_assignment struct {
  lhs box[ast_expr];
  rhs box[ast_expr];
};

deftype ast_addressof struct {
  rhs box[ast_expr];
};

deftype ast_deref struct {
  rhs box[ast_expr];
};

deftype ast_typeapp struct {
  typefunc box[ast_typeexpr];
  params array[ast_typeexpr];
};

deftype ast_struct struct {
  fields array[ast_vardecl];
};

deftype ast_enum struct {
  constructors array[ast_vardecl];
};

deftype ast_union struct {
  fields array[ast_vardecl];
};

deftype ast_arraytype struct {
  count opt[box[ast_expr]];
  param box[ast_typeexpr];
};

deftype ast_unknown struct {
};

defenum ast_typeexpr {
  Name ast_ident;
  App ast_typeapp;
  Struct ast_struct;
  Enum ast_enum;
  Union ast_union;
  Arraytype ast_arraytype;
  Unknown ast_unknown;
};

deftype ast_vardecl struct {
  name ast_ident;
  type ast_typeexpr;
};

deftype ast_bracebody struct {
  statements array[ast_statement];
};

deftype ast_var_info struct {
  vn var_number;
};

deftype ast_var_statement struct {
  info opt[ast_var_info];
  decl ast_vardecl;
  rhs opt[box[ast_expr]];
};

deftype ast_pattern_assign struct {
  pattern ast_constructor_pattern;
  rhs box[ast_expr];
};

defenum ast_condition {
  ExprCondition box[ast_expr];
  PatternCondition ast_pattern_assign;
};

deftype ast_ifthen_statement struct {
  condition ast_condition;
  body ast_bracebody;
};

deftype ast_ifthenelse_statement struct {
  condition ast_condition;
  thenbody ast_bracebody;
  elsebody ast_bracebody;
};

deftype ast_while_statement struct {
  condition ast_condition;
  body ast_bracebody;
};

deftype ast_for_statement struct {
  // Can only be an ast_expr or ast_statement_var.
  initializer opt[box[ast_statement]];
  condition opt[box[ast_expr]];
  increment opt[box[ast_expr]];
  body ast_bracebody;
};

deftype ast_switch_statement struct {
  swartch box[ast_expr];
  cases array[ast_switch_case];
};

deftype ast_return_statement struct {
  // If no expr, it returns void.
  expr opt[box[ast_expr]];
};

deftype ast_label_statement struct {
  name ast_ident;
};

deftype ast_goto_statement struct {
  target ast_ident;
};

defenum ast_statement {
  Expr ast_expr;
  Return ast_return_statement;
  Var ast_var_statement;
  IfThen ast_ifthen_statement;
  IfThenElse ast_ifthenelse_statement;
  While ast_while_statement;
  For ast_for_statement;
  Switch ast_switch_statement;
  Label ast_label_statement;
  Goto ast_goto_statement;
};

deftype ast_constructor_pattern struct {
  addressof_constructor opt[ast_ident];
  constructor_name ast_ident;
  decl ast_vardecl;
};

defenum ast_case_pattern {
  Case ast_constructor_pattern;
  Default void;
};

deftype ast_switch_case struct {
  pattern ast_case_pattern;
  body ast_bracebody;
};

deftype ast_fullbody struct {
  bb ast_bracebody;
};

deftype ast_lambda struct {
  args array[ast_vardecl];
  return_type ast_typeexpr;
  body ast_fullbody;
};

defenum ast_fieldname {
  WholeField void;
  NameField ast_ident;
};

deftype ast_local_field struct {
  lhs box[ast_expr];
  fieldname ast_fieldname;
};

deftype ast_deref_field struct {
  lhs box[ast_expr];
  fieldname ast_fieldname;
};


deftype global_info struct {
  ent def_entry_id;
  inst def_inst_id;
};

deftype local_info struct {
  varnum var_number;
};

defenum ast_name_expr_info {
  LocalResolve local_info;
  GlobalResolve global_info;
  EnumConstructor void;
};

deftype ast_name_expr struct {
  name_info opt[ast_name_expr_info];
  ident ast_ident;
  generic_params opt[array[ast_typeexpr]];
};

func mk(ident ast_ident, generic_params opt[array[ast_typeexpr]]) ast_name_expr {
  return {None(), ident, generic_params};
}

func annotate_name_info(a *ast_name_expr, info ast_name_expr_info) void {
  check(isNone(&a->name_info));
  a->name_info = Has(info);
}

deftype ast_paren_expr struct {
  expr box[ast_expr];
};

deftype ast_index_expr struct {
  lhs box[ast_expr];
  rhs box[ast_expr];
};

deftype ast_typed_expr struct {
  type ast_typeexpr;
  expr box[ast_expr];
};

deftype ast_strinit struct {
  exprs array[ast_expr];
};

// Is a non-lval an rval?  Okay.
deftype rval_description struct {
  // The cell number of the temporary that this rval is _part of_.
  // TODO: Rename to whole_num.
  num cell_num;

  // The cell number of the field (a virtual cell if different from num).
  partial_num cell_num;

  // Tells whether the rval would need to get copied out of temporary, or whether the rval _is_ the whole temporary and can get moved.
  // (TODO: Is this not always the value of partial_num == num?  Can we get rid of this?)
  whole_temporary bool;
};

deftype lval_description struct {
  // The cell number of the lvalue.  Be it part of a bigger object or not.
  num cell_num;
};

defenum is_lval {
  IsLvalNo rval_description;
  IsLvalYes lval_description;
};

func wholeRval(num cell_num) is_lval {
  return IsLvalNo({num, num, true});
}

func isNo(x is_lval) bool {
  if case IsLvalNo(a rval_description) = x {
    return true;
  }
  return false;
}

deftype instpair struct {
  ent_id def_entry_id;
  inst_id def_inst_id;
};

defenum ctor_desc {
  TrivialCtor void;
  FunCtor instpair;
};

deftype copydestroy struct {
  copy ctor_desc;
  destroy ctor_desc;
};

deftype copydestroydestroy struct {
  copy ctor_desc;
  destroy_temporary ctor_desc;
  destroy ctor_desc;
};

defenum ast_expr_disposal {
  // Value doesn't get disposed by this expr.  (E.g. it's an lvalue result of a statement expr, or a field access and the value gets disposed of later, or a ParenExpr, etc.)
  DisposeIgnore void;
  // Value gets destroyed (and ignored).  (E.g. it's an rvalue result of a statement expr.)
  DisposeDestroy ctor_desc;
  // Value gets copied... into a function param, or variable, or something.  For lvalues.
  DisposeCopy ctor_desc;
  // Value gets copied... it's an rvalue so the temporary copied from gets destroyed.
  DisposeCopyAndDestroy copydestroy;
  // Value gets moved.  (E.g. rhs of variable assignment.)
  DisposeMove ctor_desc;
  // Value should get constructed wherever it's supposed to end up, so that it doesn't get moved.  For "whole field" rvalues.
  DisposeMoveInPlace void;
  // We copy the object, use it, then destroy the new object we created.
  DisposeCopyThenDestroy copydestroy;
  // We move-in-place the object... use it, then destroy it.
  DisposeMoveInPlaceThenDestroy ctor_desc;
  // We copy the object and destroy the old temporary... use it, then destroy the new object we created.
  DisposeCopyAndDestroyThenDestroy copydestroydestroy;
};

func `==`(x ast_expr_disposal, y ast_expr_disposal) bool {
  return enumnum(&x) == enumnum(&y);
}
func `!=`(x ast_expr_disposal, y ast_expr_disposal) bool {
  return !(x == y);
}

func build_u8str(r *array[u8], x *ast_expr_disposal) void {
  switch x {
    case &DisposeIgnore(v void): {
      append(r, _u8("DisposeIgnore"));
    }
    case &DisposeDestroy(ip ctor_desc): {
      append(r, _u8("DisposeDestroy"));
    }
    case &DisposeCopy(ip ctor_desc): {
      append(r, _u8("DisposeCopy"));
    }
    case &DisposeCopyAndDestroy(cd copydestroy): {
      append(r, _u8("DisposeCopyAndDestroy"));
    }
    case &DisposeMove(ip ctor_desc): {
      append(r, _u8("DisposeMove"));
    }
    case &DisposeMoveInPlace(v void): {
      append(r, _u8("DisposeMoveInPlace"));
    }
    case &DisposeCopyThenDestroy(cd copydestroy): {
      append(r, _u8("DisposeCopyThenDestroy"));
    }
    case &DisposeMoveInPlaceThenDestroy(ip ctor_desc): {
      append(r, _u8("DisposeMoveInPlaceThenDestroy"));
    }
    case &DisposeCopyAndDestroyThenDestroy(cdd copydestroydestroy): {
      append(r, _u8("DisposeCopyAndDestroyThenDestroy"));
    }
  }
}

deftype copy_action struct {
  ctor ctor_desc;
  dest cell_num;
  src cell_num;
};

deftype move_action struct {
  ctor ctor_desc;
  dest cell_num;
  src cell_num;
};

deftype destroy_action struct {
  ctor ctor_desc;
  arg cell_num;
};

defenum after_action {
  CopyAfter copy_action;
  MoveAfter move_action;
  DestroyAfter destroy_action;
};

deftype ast_expr_after struct {
  // The after-actions get evaluated -in order-.  For example, copying a field from a temporary should happen -before- destroying the temporary.
  actions array[after_action];
};

func mk_after() ast_expr_after {
  return {mk_array()};
}

func mk_after(x after_action) ast_expr_after {
  return {mk_array(x)};
}

func mk_after(x after_action, y after_action) ast_expr_after {
  return {mk_array(x, y)};
}

deftype ast_expr_complete_info struct {
  lval is_lval;
  cu cu_typeexpr;
  cu_props type_properties;
  disposal opt[ast_expr_disposal];
  after opt[ast_expr_after];
};

func mk(lval is_lval, cu cu_typeexpr, cu_props type_properties) ast_expr_complete_info {
  return {lval, cu, cu_props, None(), None()};
}

defenum ast_expr_info {
  NoInfo void;
  IncompleteCheck te_typeexpr;
  CompleteCheck ast_expr_complete_info;
};

deftype ast_expr struct {
  info ast_expr_info;
  u ast_expr_enum;
};

func inner_info(a *ast_expr_info) ast_expr_info {
  switch a {
    case &NoInfo(v void): {
      return NoInfo(void);
    }
    case &IncompleteCheck(t te_typeexpr): {
      return IncompleteCheck(t);
    }
    case &CompleteCheck(t ast_expr_complete_info): {
      return CompleteCheck(mk(t.lval, t.cu, t.cu_props));
    }
  }
}

func annotate_info(a *ast_expr, info ast_expr_info) void {
  switch &a->info {
    case &CompleteCheck(t ast_expr_complete_info): {
      ice(_u8("expr already completely annotated"));
    }
    case &IncompleteCheck(pt te_typeexpr): {
      switch &info {
        case &CompleteCheck(t ast_expr_complete_info): { /* Do nothing. */ }
        default: {
          ice(_u8("expr already incompletely annotated"));
        }
      }
    }
    case &NoInfo(v void): { }
  }

  a->info = info;
}

func annotate_disposal(a *ast_expr, d ast_expr_disposal, aft ast_expr_after) void {
  switch &a->info {
    case &CompleteCheck(t ast_expr_complete_info): {
      if case &Has(d2 ast_expr_disposal) = &t.disposal {
        ice(_u8("annotate_disposal called twice: "), d, _u8(" on top of "), d2);
      } else {
        t.disposal = Has(d);
      }

      if case &Has(a2 ast_expr_after) = &t.after {
        ice(_u8("annotate_disposal impossibly called twice, detected with after"));
      } else {
        t.after = Has(aft);
      }
    }
    default: {
      ice(_u8("annotate_disposal for non-completely annotated expr"));
    }
  }
}


defenum ast_expr_enum {
  NameExpr ast_name_expr;
  ParenExpr ast_paren_expr;
  NumericLiteral ast_numeric_literal;
  BoolLiteral ast_bool_literal;
  VoidLiteral ast_void_literal;
  NullLiteral ast_null_literal;
  CharLiteral ast_char_literal;
  StringLiteral ast_string_literal;
  Funcall ast_funcall;
  Assignment ast_assignment;
  AddressOf ast_addressof;
  Deref ast_deref;
  IndexExpr ast_index_expr;
  Lambda ast_lambda;
  LocalField ast_local_field;
  DerefField ast_deref_field;
  TypedExpr ast_typed_expr;
  Strinit ast_strinit;
};

func mk(x ast_expr_enum) ast_expr {
  return {NoInfo(void), x};
}

deftype ast_variadic_generics struct {
  before array[ast_ident];
  variadic_name ast_ident;
  after array[ast_ident];
};

defenum ast_generics {
  NoGenerics void;
  HasGenerics array[ast_ident];
  // Right now VariadicGenerics can't be parsed.
  VariadicGenerics ast_variadic_generics;
};

defenum ast_isexport {
  IsExport void;
  IsNotExport void;
};

defenum ast_isvar {
  IsVar void;
  IsNotVar void;
};

deftype ast_def struct {
  is_export ast_isexport;
  is_var ast_isvar;
  generics ast_generics;
  name ast_ident;
  syntactic_typeexpr opt[ast_typeexpr];
  rhs ast_expr;
};

deftype ast_extern_def struct {
  name ast_ident;
  type ast_typeexpr;
};

deftype ast_import struct {
  name ast_ident;
};

defenum ast_defclass_disposition {
  DefaultCopyMoveDestroy void;
  DefaultMove void;
  NoDefaults void;
};

defenum ast_type_def_rhs {
  TypeexprRhs ast_typeexpr;
  ClassexprRhs struct {
    disposition ast_defclass_disposition;
    rhs_type ast_typeexpr;
  };
};

deftype ast_type_def struct {
  generics ast_generics;
  name ast_ident;
  rhs ast_type_def_rhs;
};

defenum ast_access_arity {
  AccessArityNone void;
  AccessArityFinite u32;
};

deftype ast_access struct {
  name ast_ident;
  arity ast_access_arity;
  toplevels array[ast_toplevel];
};

defenum ast_toplevel {
  Import ast_import;
  Def ast_def;
  ExternDef ast_extern_def;
  TypeDef ast_type_def;
  Access ast_access;
};

deftype ast_file struct {
  toplevels array[ast_toplevel];
};

