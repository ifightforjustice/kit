        Kit v0.0000...1A.x

At some future date, Kit will be a programming language.  Right
now, it's a work in progress.  Use windows_build.bat or
./linux_build.sh to build it, or just manually invoke your C compiler
(look inside those scripts for an example, they're one-liners).
Then I recommend running

   out --test

to see if the tests pass.

Then, try running (on Windows),

   cd src
   ..\out main
   cl main.obj dummy.c
   main
   main --build
   main main

or, try running (on 32-bit Linux),

   cd src
   ../out --linux main
   gcc main.o dummy.c
   ./a.out
   ./a.out --build
   ./a.out main

or, try running (on 64-bit Linux with multilib set up),

   cd src
   ../out --linux main
   gcc -m32 main.o dummy.c
   ./a.out
   ./a.out --build
   ./a.out main

to see the test suite, written in proto-Kit, for parsing and
typechecking (or with --build, to take it through the build
process) (or with main or some other module name, to take it as far
through the build process for that module as has been implemented).
The current directory structure is:

   trc - 1st stage compiler, written in C, compiled by invoking
   windows_build.bat, linux_build.sh, etc.

   [u-z]rc - future locations of the current "src" directory, when
   it's no longer the tip of the bootstrap chain, compilable using
   the compiler defined in [t-y]rc.

   src - someday, a self-hosting compiler buildable by max{[t-z]rc}.

   examples - examples for trc to run and other junk.

Here's the project timeline:

   1. Parsing.  (DONE)
   2. Typechecking/name-resolving.  (DONE)
   3. Generate code, i.e. have a working compiler.  (DONE)
   4. Cleanup error messages to have useful source information. (BETTER)
   5. Cleanup the language to make it more usable. (GOOD ENOUGH)
      Wishlist (waiting for these features specifically needed):
       A. Structure / array initialization syntax. (DONE)
       B. Packed struct types.
       C. Destructuring assignment.
       D. Incr/decr and "+="-type operators.
   6. Linux support. (DONE)
   7. Make a self-hosted implementation (adding improvements and
      fixes to the C implementation when useful).
   8. ...

The language implemented in trc is merely "C, with templates,
constructors/destructors, elementary encapsulation, and tagged enum
types."  Future versions of the language will be more advanced.
trc is a trade-off between the convenience of implementing trc and
the convenience of implementing its successor.
