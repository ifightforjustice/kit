enum[T] nbfc {
  NotComputed void;
  BeganComputing void;
  FailedComputation void;
  Computed T;
};

func[T] isBeganComputing(x *nbfc[T]) bool {
  if case &BeganComputing = x {
    return true;
  } else {
    return false;
  }
}

func[T] unHas(x *nbfc[T]) *T {
  if case &Computed(t T) = x {
    return &t;
  } else {
    ice(_u8("unComputed failed"));
    return fake();
  }
}

inline func[T] unComputed(x *nbfc[T]) *T {
  return unHas(x);
}

enum[T] nc {
  NotComputed void;
  Computed T;
};

func[T] annotate(x *nc[T], y T) void {
  if case &Computed(already T) = x {
    ice(_u8("Already annotated"));
  }
  *x = Computed(y);
}

func[T] annotate_ref(x *nc[T], y *T) void {
  if case &Computed(already T) = x {
    ice(_u8("Already annotated"));
  }
  *x = Computed(*y);
}

func[T] annotate_move(x *nc[T], y *T) void {
  if case &Computed(already T) = x {
    ice(_u8("Already annotated"));
  }
  tmp T;
  *x = Computed(tmp);
  if case &Computed(dest T) = x {
    swap(&dest, y);
  }
}

func[T] unHas(x *nc[T]) *T {
  if case &Computed(y T) = x {
    return &y;
  } else {
    ice(_u8("unHas(nc) sees not-computed"));
    return fake();
  }
}