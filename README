        Kit v0.00.2C.x

Current status:  "This is a test!  Ignore!!!"

  BUILD INSTRUCTIONS

(From a Visual Studio command line:)

   windows_build.bat
   windows_build_s2.bat
   windows_build_s3.bat

or  (on 32-bit Linux, or 64-bit with gcc-multilib)

   ./linux_build.sh; ./linux_build_s2.sh; ./linux_build_s3.sh

or  (on OS X, with XCode tools (i.e. clang) installed)

   ./osx_build.sh; ./osx_build_s2.sh; ./osx_build_s3.sh


  RUN INSTRUCTIONS

   # Run tests.
   s3 --build

   # Build modulename.ki and its imports, outputting modulename.obj
   s3 <modulename>

   # Build modulename.ki and its imports, outputting modulename.o
   s3 --linux <modulename>
   s3 --osx <modulename>


Again:

# Prerequisites: An x86 CPU.  Windows, Linux, FreeBSD, or OS X.  On
# Windows, MSVC 2013 or 2015 (something with basic C99 support) --
# for example, run these commands from a "Developer Command Prompt
# for VS2015".  On Linux, gcc with 32-bit support, which usually
# means some gcc-multilib package.  On OS X, clang (i.e. XCode's
# command line tools).  FreeBSD works out of the box with "--linux"
# (because we use vanilla libc).

# Step 1. Build s1 -- creates executable "out.exe" (or "out")

   windows_build.bat  (or ./linux_build.sh, or ./osx_build.sh)

# Step 2. Build s2 -- creates executable "s2.exe" (or "s2")

   windows_build_s2.bat  (or ./linux_..., or ...)

# Step 3. Build s3

   windows_build_s3.bat

# Step 5. Run parsing/typechecking+codegen tests.

   s3 --build     (or ./s3 --build)
   s3 --no-build  (removes codegen part of tests)
   s3             (same as s3 --build, less verbosely)

# Step 6. If you wish, run s3-self on itself

   cd vrc
   move main.obj old_main.obj
   ..\s3 main
   sha1sum old_main.obj main.obj

# The sha1sums should match.

  DIRECTORY STRUCTURE

The current directory structure is:

   trc - s1, implemented in C.  Compiles s2.
   urc - s2, implemented in proto-Kit.  Compiles s2 and s3.
   vrc - s3, implemented in proto-Kit.  Compiles s3.
   examples - examples to run, disorganized junk

  COMMAND USAGE

"out" is the name of the s1 executable, "s3" is the name of the s3 executable, and "s4" is the name of the s4 executable.

   out --test    # runs tests.
   out <modulename>    # builds <modulename>.ki and its imports.
   s2    # runs parsing/typechecking tests with codegen.
   s2 --build    # same, verbosely
   s2 --no-build    # same, verbosely, and without codegen.
   s2 <modulename>  # builds <modulename>.ki and its imports.
   s2 --linux <modulename>  # same but outputs a Linux .o file.
   s2 --osx <modulename>  # same but outputs an OS X .o file.
   s3 ...    # same as s2.

  ABOUT THE VERSIONS

s1's language is merely "C, with templates, constructors and
destructors, elementary encapsulation, tagged enum types, no
implicit conversions."  s2's is very similar to s1's, but with some
basic convenience enhancements that should be easy to backport to
s1 -- the differences are described in FEATURES.  s3 defines a
language with ever-more-advanced features.

Right now, s1 can compile s2, and it can almost compile s3.  In the
long run, as soon as s4 is the actively developed version, s2 will
eventually go away.
