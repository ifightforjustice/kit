import state;

// TODO: Should the primitive types returned here include their deftype_inst info?

func primitive_bool_type(cs *checkstate) te_typeexpr {
  return TeName({cs->cym.boolsym, None()});
}

func primitive_void_type(cs *checkstate) te_typeexpr {
  return TeName({cs->cym.voidsym, None()});
}

func primitive_u8_type(cs *checkstate) te_typeexpr {
  return TeName({cs->cym.u8sym, None()});
}

func primitive_i32_type(cs *checkstate) te_typeexpr {
  return TeName({cs->cym.i32sym, None()});
}

func primitive_size_type(cs *checkstate) te_typeexpr {
  return TeName({cs->cym.sizesym, None()});
}

func primitive_string_literal_type(cs *checkstate, n size) te_typeexpr {
  return TeArraytype({Has(~n), embox(primitive_u8_type(cs))});
}

func primitive_function_puretype(cs *checkstate) te_puretype {
  return TePureName(cs->cym.fnsym);
}

func primitive_pointer_puretype(cs *checkstate) te_puretype {
  return TePureName(cs->cym.ptrtype_sym);
}

func pointer_to(cs *checkstate, t te_typeexpr) te_typeexpr {
  params array[te_typeexpr];
  push(&params, t);
  return TeApp({embox(primitive_pointer_puretype(cs)), params, None()});
}

func add_primitives(cs *checkstate) void {
  add_simple_primitive(cs, cs->cym.boolsym, cs->platform.booltraits);
  add_simple_primitive(cs, cs->cym.i8sym, cs->platform.i8traits.flat);
  add_simple_primitive(cs, cs->cym.u8sym, cs->platform.u8traits.flat);
  add_simple_primitive(cs, cs->cym.i16sym, cs->platform.i16traits.flat);
  add_simple_primitive(cs, cs->cym.u16sym, cs->platform.u16traits.flat);
  add_simple_primitive(cs, cs->cym.i32sym, cs->platform.i32traits.flat);
  add_simple_primitive(cs, cs->cym.u32sym, cs->platform.u32traits.flat);
  add_pointer_primitive(cs);
}

func is_numeric_type(cs *checkstate, pt *te_typeexpr, out *numeric_traits) bool {
  // TODO: This implementation should work on complete types, use proper scoping rules (once we get scoping rules).
  if case &TeName(a te_name) = pt {
    if a.value == cs->cym.i8sym {
      *out = cs->platform.i8traits.numeric;
    } else if a.value == cs->cym.u8sym {
      *out = cs->platform.u8traits.numeric;
    } else if a.value == cs->cym.i16sym {
      *out = cs->platform.i16traits.numeric;
    } else if a.value == cs->cym.u16sym {
      *out = cs->platform.u16traits.numeric;
    } else if a.value == cs->cym.i32sym {
      *out = cs->platform.i32traits.numeric;
    } else if a.value == cs->cym.u32sym {
      *out = cs->platform.u32traits.numeric;
    } else {
      return false;
    }
    return true;
  }
  return false;
}

func add_simple_primitive(cs *checkstate, name sym, flat_traits flat_traits) void {
  info opt[deftype_inst_info] = Has({
    None(),
    @[type_properties]{
      flat_traits.size,
      flat_traits.alignment,
      DerivedMethodTrivial(void),
      DerivedMethodTrivial(void),
      DerivedMethodTrivial(void),
      DerivedMethodTrivial(void)
    }
  });
  inst_id deftype_inst_id
      = add_deftype_inst(cs, {NoParms(void),
                              FinishedChecking(void),
                              info});
  insts array[deftype_inst_id];
  push(&insts, inst_id);
  // TODO: access_scope is not relevant to a primitive def.
  access_scope array[access_entry_id];
  ent deftype_entry = {cs->cym.primitive_module_sym, name, access_scope, RhsImpossible(void), NoGenerics(void), None(), info, insts};
  id deftype_entry_id = add_deftype_entry(cs, ent);
  // TODO: We probably want to put the id in some kind of "primitive" module.
}

func add_pointer_primitive(cs *checkstate) void {
  one_generic array[ast_ident];
  // TODO: Something about the meta value and zero literal.
  push(&one_generic, {@[ast_meta]~0, cs->cym.tee_sym});
  // It's as if pointers belong is an even _more_ primitive module than integer/bool types.
  ent deftype_entry = {
    cs->cym.primitive_module_sym,
    cs->cym.ptrtype_sym,
    default@[array[access_entry_id]](),
    RhsImpossible(void),
    HasGenerics(one_generic),
    None(),
    Has({None(),
         @[type_properties]{
           cs->platform.ptrtraits.size,
           cs->platform.ptrtraits.alignment,
           DerivedMethodTrivial(void),
           DerivedMethodTrivial(void),
           DerivedMethodTrivial(void),
           DerivedMethodTrivial(void)
         }}),
    default@[array[deftype_inst_id]]()
  };
  id deftype_entry_id = add_deftype_entry(cs, ent);
  // TODO: We probably want to put the id in some kind of "primitive" or hyper-primitive module.
}