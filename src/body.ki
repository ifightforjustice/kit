import expr;

// What we need to know about bodies:
//   - that labels have unique names.
//   - what variables are in scope at each label (beware duplicate variable names).
//   - what variables need to get init/destroyed for each goto. (Beware case constructor variables that don't get destroyed.  Also, you can't goto into a casebody (because their variables cannot be initialized).)
//   - that no control path reaches the end of the function without a return statement.
//   - that there's no dead code after a goto or return statement.  (Really?  Maybe let that be a warning.)

deftype goto_info struct {
  stnum statement_num;
  label_name sym;
  in_scope array[var_number];
};

deftype label_info struct {
  stnum statement_num;
  label_name sym;
  in_scope array[var_number];
  hit bool;
};

deftype statement_info struct {
  st opt[*ast_statement];
  incoming array[statement_num];
  outgoing array[statement_num];
  marked_reachable bool;
};

deftype bodystate struct {
  es exprscope;
  ds *defscope;
  cs *checkstate;
  im *identmap;
  clq *clqueue;
  return_type *cu_typeexpr;

  gotos array[goto_info];
  labels array[label_info];
  statements array[statement_info];
};

func mk(ds *defscope, return_type *cu_typeexpr) bodystate {
  ret bodystate;
  ret.es = mk(ds);
  ret.ds = ds;
  ret.cs = ds->cs;
  ret.im = ds->im;
  ret.clq = ds->clq;
  ret.return_type = return_type;
  return ret;
}

deftype statement_num size;

def `~` fn[size, statement_num] = wrapconvert;

func add_statement(bs *bodystate, s opt[*ast_statement]) statement_num {
  ret size = count(&bs->statements);
  push(&bs->statements, {s, mk_array@[statement_num](), mk_array@[statement_num](), false});
  return ~ret;
}

func connect_statements(bs *bodystate, from statement_num, to statement_num) void {
  from_inf *statement_info = ref(&bs->statements, from.~);
  to_inf *statement_info = ref(&bs->statements, to.~);
  push(&from_inf->outgoing, to);
  push(&to_inf->incoming, from);
}

// Returns the fall-through entry node and the fall-through exit node of a body or statement.  A body or statement might not have a fall-through exit, if e.g. it has a return statement.
deftype entryexit struct { entry statement_num; exit statement_num; };

func check_body(bs *bodystate, a *ast_bracebody, ee_out *entryexit) bool {
  nstatements size = count(&a->statements);
  entry statement_num = add_statement(bs, None());
  exit statement_num = entry;
  vp varpopper;
  init_vp(&vp, bs->ds);
  for i size = 0; i < nstatements; i = i + 1 {
    s *ast_statement = ref(&a->statements, i);
    ee entryexit;
    if !check_statement(bs, &vp, s, &ee) {
      return false;
    }
    connect_statements(bs, exit, ee.entry);
    exit = ee.exit;
  }
  *ee_out = {entry, exit};
  return true;
}

func check_discard_expr(es *exprscope, x *ast_expr, pt *te_typeexpr) bool {
  if !check_expr_ai(es, AllowIncompleteNo(void), x, pt) {
    return false;
  }
  if !annotate_disposal_for_discard(es, x) {
    return false;
  }
  return true;
}

// For exprs that we use, but then discard.  Conditionals... and switches?  Kinda.
func check_consume_then_discard_expr(es *exprscope, x *ast_expr, pt *te_typeexpr) bool {
  if !check_expr_ai(es, AllowIncompleteNo(void), x, pt) {
    return false;
  }
  if !annotate_disposal_for_consume_then_discard(es, x) {
    return false;
  }
  return true;
}

func check_statement(bs *bodystate, vp *varpopper, s *ast_statement, ee_out *entryexit) bool {
  num statement_num = add_statement(bs, Has(s));
  switch s {
    case &Expr(b ast_expr): {
      pt te_typeexpr = TeUnknown(void);
      if !check_discard_expr(&bs->es, &b, &pt) {
        return false;
      }
      *ee_out = {num, num};
    }

    case &Return(b ast_return_statement): {
      if case &Has(c box[ast_expr]) = &b.expr {
        if !check_consume_expr(&bs->es, oo(&c), &bs->return_type->~) {
          return false;
        }
      } else {
        if !type_is_void(bs->cs, bs->return_type) {
          ERR(_u8("Empty return statement with non-void return value."));
          return false;
        }
      }
      *ee_out = {num, add_statement(bs, None())};
    }

    case &Var(b ast_var_statement): {
      // TODO: Cache converted... or something.
      converted te_typeexpr;
      if !convert_typeexpr(bs->cs, &b.decl.type, &converted) {
        return false;
      }

      computed cac_typeexpr;
      if !check_and_compute_typeexpr(bs->cs, bs->clq, bs->ds->generics, bs->ds->parms, &converted, &computed) {
        return false;
      }
      cu_computed cu_typeexpr;
      complete_type *cu_typeexpr;
      note_initter bool;
      if case &Has(x box[ast_expr]) = &b.rhs {
        if !check_consume_expr(&bs->es, oo(&x), &computed.te) {
          return false;
        }
        complete_type = expr_complete_type(oo(&x));
        note_initter = false;
      } else {
        if !computed.complete {
          ERR(_u8("Variable declaration with no rhs, incomplete type"));
          return false;
        }
        cu_computed = ~computed.te;
        complete_type = &cu_computed;
        note_initter = true;
      }

      vn var_number;
      if !ds_push_var(bs->ds, vp, &b.decl.name, complete_type, AutoInitYes(void), &vn) {
        return false;
      }
      b.info = Has({vn});
      if !ds_note_var_destroyer(bs->ds, vn) {
        return false;
      }
      if note_initter {
        if !ds_note_var_initter(bs->ds, vn) {
          return false;
        }
      }
      *ee_out = {num, num};
    }

    case &IfThen(b ast_ifthen_statement): {
      cond_vp varpopper;
      init_vp(&cond_vp, bs->ds);
      if !check_condition(&bs->es, &cond_vp, &b.condition) {
        return false;
      }
      body_ee entryexit;
      if !check_body(bs, &b.body, &body_ee) {
        return false;
      }
      tailnum statement_num = add_statement(bs, None());
      connect_statements(bs, num, tailnum);
      connect_statements(bs, num, body_ee.entry);
      connect_statements(bs, body_ee.exit, tailnum);
      *ee_out = {num, tailnum};
    }

    case &IfThenElse(b ast_ifthenelse_statement): {
      cond_vp varpopper;
      init_vp(&cond_vp, bs->ds);
      if !check_condition(&bs->es, &cond_vp, &b.condition) {
        return false;
      }
      then_ee entryexit;
      if !check_body(bs, &b.thenbody, &then_ee) {
        return false;
      }
      descope_vars(&cond_vp);
      else_ee entryexit;
      if !check_body(bs, &b.elsebody, &else_ee) {
        return false;
      }
      tailnum statement_num = add_statement(bs, None());
      connect_statements(bs, num, then_ee.entry);
      connect_statements(bs, num, else_ee.entry);
      connect_statements(bs, then_ee.exit, tailnum);
      connect_statements(bs, else_ee.exit, tailnum);
      *ee_out = {num, tailnum};
    }

    case &While(b ast_while_statement): {
      cond_vp varpopper;
      init_vp(&cond_vp, bs->ds);
      if !check_condition(&bs->es, &cond_vp, &b.condition) {
        return false;
      }
      body_ee entryexit;
      if !check_body(bs, &b.body, &body_ee) {
        return false;
      }
      connect_statements(bs, num, body_ee.entry);
      connect_statements(bs, body_ee.exit, num);
      *ee_out = {num, num};
    }

    case &For(b ast_for_statement): {
      initter_vp varpopper;
      init_vp(&initter_vp, bs->ds);
      loopnum statement_num = add_statement(bs, None());
      if case &Has(initter box[ast_statement]) = &b.initializer {
        initter_ee entryexit;
        if !check_statement(bs, &initter_vp, oo(&initter), &initter_ee) {
          return false;
        }
        connect_statements(bs, num, initter_ee.entry);
        connect_statements(bs, initter_ee.exit, loopnum);
      } else {
        connect_statements(bs, num, loopnum);
      }

      exitnum statement_num = add_statement(bs, None());
      if case &Has(cond box[ast_expr]) = &b.condition {
        boolean cu_typeexpr = compute_prim(bs->ds, primitive_bool_type(bs->cs));
        if !check_consume_then_discard_expr(&bs->es, oo(&cond), &boolean.~) {
          return false;
        }
        connect_statements(bs, loopnum, exitnum);
      }
      if case &Has(incr box[ast_expr]) = &b.increment {
        unknown te_typeexpr = TeUnknown(void);
        if !check_discard_expr(&bs->es, oo(&incr), &unknown) {
          return false;
        }
      }
      body_ee entryexit;
      if !check_body(bs, &b.body, &body_ee) {
        return false;
      }
      connect_statements(bs, loopnum, body_ee.entry);
      connect_statements(bs, body_ee.exit, loopnum);
      *ee_out = {num, exitnum};
    }

    case &Switch(b ast_switch_statement): {
      unknown te_typeexpr = TeUnknown(void);
      if !check_consume_then_discard_expr(&bs->es, oo(&b.swartch), &unknown) {
        return false;
      }

      swartch_type *cu_typeexpr = expr_complete_type(oo(&b.swartch));

      switchable_type *te_typeexpr;
      is_ptr bool = decompose_typeapp(&swartch_type->~, primitive_pointer_puretype(bs->cs), &switchable_type);
      if !is_ptr {
        switchable_type = &swartch_type->~;
      }

      // switchable_type is complete, because swartch_type was.

      enum_type *te_typeexpr;
      if !complete_structural_rhs(bs->ds, switchable_type, &enum_type) {
        return false;
      }
      // enum_type is complete, because complete_structural_rhs does that.

      exitnum statement_num = add_statement(bs, None());

      if case &TeEnum(et te_enum) = enum_type {
        ncases size = count(&b.cases);
        for i size = 0; i < ncases; i = i + 1 {
          cas *ast_switch_case = ref(&b.cases, i);
          for j size = 0; j < i; j = j + 1 {
            if duped_patterns(&cas->pattern, &ref(&b.cases, j)->pattern) {
              ERR(_u8("duplicate patterns"));
              return false;
            }
          }

          switch &cas->pattern {
            case &Case(patt ast_constructor_pattern): {
              if isHas(&patt.addressof_constructor) != is_ptr {
                ERR(_u8("swartch/pattern pointeriness mismatch"));
                return false;
              }

              expected_type *te_typeexpr;
              if !find_vardecl(&et.constructors, patt.constructor_name.value, &expected_type) {
                ERR(_u8("constructor not found"));
                return false;
              }
              // expected_type is complete, because enum_type was.

              // TODO: Cache converted?
              converted te_typeexpr;
              if !convert_typeexpr(bs->cs, &patt.decl.type, &converted) {
                return false;
              }

              unified te_typeexpr;
              if !unify_types(&converted, expected_type, &unified) {
                ERR(_u8("constructor variable type mismatch"));
                return false;
              }

              case_vp varpopper;
              init_vp(&case_vp, bs->ds);
              cu_expected_type cu_typeexpr = ~ *expected_type;
              vn var_number;
              // Can't auto-initialize bound case variables, be the switch be over a pointer or not.
              if !ds_push_var(bs->ds, &case_vp, &patt.decl.name, &cu_expected_type, AutoInitNo(void), &vn) {
                return false;
              }

              body_ee entryexit;
              if !check_body(bs, &cas->body, &body_ee) {
                return false;
              }
              connect_statements(bs, num, body_ee.entry);
              connect_statements(bs, body_ee.exit, exitnum);
            }
            case &Default(v void): {
              body_ee entryexit;
              if !check_body(bs, &cas->body, &body_ee) {
                return false;
              }
              connect_statements(bs, num, body_ee.entry);
              connect_statements(bs, body_ee.exit, exitnum);
            }
          }
        }
        if ncases > count(&et.constructors) {
          check(ncases == 1 + count(&et.constructors));
          ERR(_u8("Unnecessary default case."));
          return false;
        }
      } else {
        ERR(_u8("Switching over non-switchable type."));
      }
      *ee_out = {num, exitnum};
    }
    case &Label(b ast_label_statement): {
      if case Has(ix size) = lookup_label(bs, b.name.value) {
        ERR(_u8("Duplicate label name."));
        return false;
      }

      push(&bs->labels, {num, b.name.value, vars_in_scope(bs->ds), false});
      *ee_out = {num, num};
    }
    case &Goto(b ast_goto_statement): {
      push(&bs->gotos, {num, b.target.value, vars_in_scope(bs->ds)});
      *ee_out = {num, add_statement(bs, None())};
    }
  }
  return true;
}

func lookup_label(bs *bodystate, label_name sym) opt[size] {
  nlabels size = count(&bs->labels);
  for i size = 0; i < nlabels; i = i + 1 {
    if ref(&bs->labels, i)->label_name == label_name {
      return Has(i);
    }
  }
  return None();
}

func duped_patterns(a *ast_case_pattern, b *ast_case_pattern) bool {
  switch a {
    case &Case(ac ast_constructor_pattern): {
      if case &Case(bc ast_constructor_pattern) = b {
        return ac.constructor_name.value == bc.constructor_name.value;
      }
    }
    case &Default(v void): {
      if case &Default(u void) = b {
        return true;
      }
    }
  }
  return false;
}

func check_condition(es *exprscope, cond_vp *varpopper, a *ast_condition) bool {
  switch a {
    case &ExprCondition(b box[ast_expr]): {
      booltype cu_typeexpr = compute_prim(es->ds, primitive_bool_type(es->cs));
      if !check_consume_then_discard_expr(es, oo(&b), &booltype.~) {
        return false;
      }
      return true;
    }
    case &PatternCondition(b ast_pattern_assign): {
      unknown te_typeexpr = TeUnknown(void);
      if !check_consume_then_discard_expr(es, oo(&b.rhs), &unknown) {
        return false;
      }

      // TODO: vv Some of this code is redundant with switch statement code.
      swartch_type *cu_typeexpr = expr_complete_type(oo(&b.rhs));
      switchable_type *te_typeexpr;
      is_ptr bool = decompose_typeapp(&swartch_type->~, primitive_pointer_puretype(es->cs), &switchable_type);
      if !is_ptr {
        switchable_type = &swartch_type->~;
      }
      // switchable_type is complete, because swartch_type is.

      enum_type *te_typeexpr;
      if !complete_structural_rhs(es->ds, switchable_type, &enum_type) {
        return false;
      }
      // enum_type is complete, because complete_structural_rhs.

      if case &TeEnum(et te_enum) = enum_type {
        if isHas(&b.pattern.addressof_constructor) != is_ptr {
          ERR(_u8("condition pattern pointeriness mismatch"));
          return false;
        }

        expected_type *te_typeexpr;
        if !find_vardecl(&et.constructors, b.pattern.constructor_name.value, &expected_type) {
          ERR(_u8("constructor not found in condition pattern"));
          return false;
        }
        // expected_type is complete because enum_type is.

        // TODO: Cache converted?
        converted te_typeexpr;
        if !convert_typeexpr(es->cs, &b.pattern.decl.type, &converted) {
          return false;
        }

        unified te_typeexpr;
        if !unify_types(&converted, expected_type, &unified) {
          ERR(_u8("constructor variable type mismatch"));
          return false;
        }

        cu_expected_type cu_typeexpr = ~ *expected_type;
        vn var_number;
        if !ds_push_var(es->ds, cond_vp, &b.pattern.decl.name, &cu_expected_type, AutoInitNo(void), &vn) {
          return false;
        }

        return true;
      } else {
        ERR(_u8("Condition pattern over non-switchable type."));
        return false;
      }
    }
  }
}

func type_is_void(cs *checkstate, t *cu_typeexpr) bool {
  void_type te_typeexpr = primitive_void_type(cs);
  unified te_typeexpr;
  return unify_types(&void_type, &t->~, &unified);
}

func finish_lambda_body(bs *bodystate, ee entryexit) bool {
  if !connect_gotos(bs) {
    return false;
  }
  mark_reachable(bs, ee.entry);
  if ref(&bs->statements, ee.exit.~)->marked_reachable && !type_is_void(bs->cs, bs->return_type) {
    ERR(_u8("Body can exit without return"));
    return false;
  }
  return true;
}

func mark_reachable(bs *bodystate, entry statement_num) void {
  working array[statement_num];
  push(&working, entry);
  while case Has(num) = popval(&working) {
    inf *statement_info = ref(&bs->statements, num.~);
    if !inf->marked_reachable {
      inf->marked_reachable = true;
      append(&working, &inf->outgoing);
    }
  }
}

func connect_gotos(bs *bodystate) bool {
  ngotos size = count(&bs->gotos);
  for i size = 0; i < ngotos; i = i + 1 {
    g *goto_info = ref(&bs->gotos, i);
    if case Has(j size) = lookup_label(bs, g->label_name) {
      l *label_info = ref(&bs->labels, j);
      destruct array[var_number];
      construct array[var_number];
      var_difference(&g->in_scope, &l->in_scope, &destruct, &construct);

      nconstruct size = count(&construct);
      for k size = 0; k < nconstruct; k = k + 1 {
        vn var_number = get(&construct, k);
        vi *var_info = ref_var(bs->ds, vn);
        if vi->autoinit == AutoInitNo(void) {
          ERR(_u8("goto for label '"), lookup(bs->im, l->label_name), _u8("' enters non-initializable variable's scope"));
          return false;
        }
        if !ds_note_var_initter(bs->ds, vn) {
          return false;
        }
      }

      ndestruct size = count(&destruct);
      for k size = 0; k < ndestruct; k = k + 1 {
        vn var_number = get(&destruct, k);
        if !ds_note_var_destroyer(bs->ds, vn) {
          return false;
        }
      }

      l->hit = true;
      connect_statements(bs, g->stnum, l->stnum);
    } else {
      ERR(_u8("no label named '"), lookup(bs->im, g->label_name), _u8("'"));
      return false;
    }
  }

  nlabels size = count(&bs->labels);
  for i size = 0; i < nlabels; i = i + 1 {
    l *label_info = ref(&bs->labels, i);
    if !l->hit {
      ERR(_u8("no gotos for label named '"), lookup(bs->im, l->label_name), _u8("'"));
      return false;
    }
  }

  return true;
}

// g and l are in increasing order.
func var_difference(g *array[var_number], l *array[var_number], removed_out *array[var_number], added_out *array[var_number]) void {
  check(is_strictly_increasing(g));
  check(is_strictly_increasing(l));
  ng size = count(g);
  nl size = count(l);
  i size = 0;
  j size = 0;
  removed array[var_number];
  added array[var_number];
  while i < ng || j < nl {
    if i == ng {
      push(&added, get(l, j));
      j = j + 1;
    } else if j == nl {
      push(&removed, get(g, i));
      i = i + 1;
    } else {
      gnum var_number = get(g, i);
      lnum var_number = get(l, j);
      if gnum == lnum {
        i = i + 1;
        j = j + 1;
      } else if gnum < lnum {
        push(&removed, gnum);
        i = i + 1;
      } else {
        push(&added, lnum);
        j = j + 1;
      }
    }
  }
  *removed_out = removed;
  *added_out = added;
}

