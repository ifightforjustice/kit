import state;

// This file's a grab-bag for ipse type related stuff.  Probably most of it should be
// moved to other files and this should go away.

// I suspect instpacks might require ipse type name mapping information, so this is a
// placeholder.
func canonicalized_pack(pack *opt[te_instpack]) opt[te_instpack] {
  return *pack;
}

func canonicalize_arraytype_count(a *opt[u32]) opt[u32] {
  return *a;
}

func make_canonicalized_ipse_name(im *identmap, ix size) sym {
  b array[u8];
  push(&b, '$');
  build_u8str(void, &b, &ix);
  return intern(im, from_u8(&b));
}

func canonicalize_idy_ipses(im *identmap, t *te_typeexpr, out *te_typeexpr, ipse_names_append *array[sym], canonicalized_scope_append *type_scope) void {
  switch t {
  case &TeName(a te_name):
    *out = *t;
  case &TeApp(a te_typeapp):
    newparams array[te_typeexpr];
    nparams size = count(&a.params);
    for i size = 0; i < nparams; i = i + 1 {
      tmp te_typeexpr;
      canonicalize_idy_ipses(im, ref(&a.params, i), &tmp, ipse_names_append, canonicalized_scope_append);
      push(&newparams, tmp);
    }
    *out = TeApp({a.typefunc, freeze(&newparams), canonicalized_pack(&a.pack)});
  case &TeUnion(a te_union):
    // Honestly, a union having ipses would be pretty weird.
    *out = TeUnion({canonicalize_idy_vardecls(im, &a.fields, ipse_names_append, canonicalized_scope_append)});
  case &TeArraytype(a te_arraytype):
    count opt[u32] = canonicalize_arraytype_count(&a.count);
    param shp[te_typeexpr];
    canonicalize_idy_ipses(im, oo(&a.param), oo(&param), ipse_names_append, canonicalized_scope_append);
    *out = TeArraytype({count, param});
  case &TeIpse(a te_ipse):
    *canonicalized_scope_append = { };  // to break code later
    if case Has(ix size) = find(ipse_names_append, a.name) {
      *out = TeIpse({make_canonicalized_ipse_name(im, ix)});
    } else {
      n size = count(ipse_names_append);
      push(ipse_names_append, a.name);
      *out = TeIpse({make_canonicalized_ipse_name(im, n)});
    }
  case &TeUnknown:
    ice(_u8("canonicalize_idy_ipses sees TeUnknown."));
  }
}

func canonicalize_idy_vardecls(im *identmap, a *shray[te_vardecl], ipse_names_append *array[sym], canonicalized_scope_append *type_scope) shray[te_vardecl] {
  build array[te_vardecl];
  n size = count(a);
  for i size = 0; i < n; i = i + 1 {
    decl *te_vardecl = ref(a, i);
    tmp te_typeexpr;
    canonicalize_idy_ipses(im, &decl->type, &tmp, ipse_names_append, canonicalized_scope_append);
    push(&build, {decl->name, tmp});
  }
  return freeze(&build);
}
