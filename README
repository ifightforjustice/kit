        Kit v0.00.2C.x

Current status:  "This is a test!  Ignore!!!"

1. BUILD INSTRUCTIONS

(From a Visual Studio command line:)

   mk\build_windows.bat

or  (on 32-bit Linux, or 64-bit with gcc-multilib)

   ./mk/build_linux.sh

or  (on OS X, with XCode tools (i.e. clang) installed)

   ./mk/build_osx.sh


2. RUN INSTRUCTIONS

   # Run tests.
   s3
   # Run tests more verbosely.
   s3 --build
   # Run tests verbosely, without the codegen phase.
   s3 --no-build

   # Build modulename.ki and its imports for Windows, => modulename.obj
   s3 <modulename>

   # Build modulename.ki and its imports, => modulename.o
   s3 --linux <modulename>
   s3 --osx <modulename>

3. FOR FREEBSD USERS

   FreeBSD works out of the box with "--linux" -- you'll probably
   need to tweak the mk/linux scripts to use clang.

4. PREREQUISITES

  -. An x86 CPU.
  -. One of:
    a. Windows (MSVC 2013 or 2015)
    b. Linux (gcc with 32-bit support, i.e. gcc-multilib)
    c. OS X (with clang, i.e. XCode's command line tools, or maybe some GCC)
    c. FreeBSD (using the "--linux" option, it makes an ELF .o file)

5. DIRECTORY STRUCTURE

The current directory structure is:

   trc - s1, implemented in C.  Compiles s2.
   urc - s2, implemented in proto-Kit.  Compiles s2 and s3.
   vrc - s3, implemented in proto-Kit.  Compiles s3 (and s2, probably).
   examples - examples to run, disorganized junk

  ABOUT THE VERSIONS

s1's language is merely "C, with templates, constructors and
destructors, elementary encapsulation, tagged enum types, no
implicit conversions."  s2's is very similar to s1's, but with some
basic convenience enhancements that should be easy to backport to
s1 -- the differences are described in FEATURES.  s3 defines a
language with ever-more-advanced features.
