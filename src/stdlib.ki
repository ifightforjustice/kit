extern malloc fn[size, *void];
extern free fn[*void, void];
extern abort fn[void];
defclass FILE void;
extern stdout *FILE;
extern stdin *FILE;
extern stderr *FILE;
// buffer, size, count, stream
extern fread fn[*void, size, size, *FILE, size];
extern fwrite fn[*void, size, size, *FILE, size];
// TODO: Add "int" as a built-in?  "c_int"?
extern fclose fn[*FILE, i32];  // TODO: actually returns "int"
extern feof fn[*FILE, i32];  // TODO: actually returns "int"
// TODO: Add "char" as a built-in?
extern fopen fn[*u8, *u8, *FILE];
extern fflush fn[*FILE, i32];   // TODO: actually returns "int"
// TODO: Add platform-specific tests for stuff like "is EOF -1"
def EOF i32 = -1;  // TODO: is actually "int"
// TODO: fseek takes a "long".

func checkmalloc(n size) *void {
  n = max(n, 1);
  ret *void = malloc(n);
  check(ret != null);
  return ret;
}

defenum[T] opt {
  None void;
  Has T;
};

func[T] None() opt[T] {
  return None(void);
}

deftype[S, T] pair struct {
  car S;
  cdr T;
};

func[S, T] cons(s S, t T) pair[S, T] {
  ret pair[S, T];
  ret.car = s;
  ret.cdr = t;
  return ret;
}

func[S, T] wrapconvert(x T) S {
  ret S;
  ret.~ = x;
  return ret;
}

func check(x bool) void {
  if x { abort(); }
}

func[T] max(x T, y T) T {
  if (x < y) {
    return y;
  } else {
    return x;
  }
}

func[S, T] cast(p *S) *T {
  u union { p *S; q *T; };
  u.p = p;
  return u.q;
}

func[S, T] up(s S) T {
  ret T;
  ret.~ = s;
  return ret;
}
