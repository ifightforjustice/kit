import check;

/* bnno = b.n.n.o. = "bytes" (not necessarily octets)

"sizes" are in bnno's -- in terms of the minimal addressable unit --
on the HP Saturn that'd be nibbles, on other systems it might be 16
bits.  The term "bnno" is used because "byte" is so likely to be
misinterpreted. */

deftype st_env struct {
  plat platform_info;

  objects array[opt[st_value]];

  // Indexed by cell_num.  Contains the number of the object representing the cell -- if the cell/object currently exists.
  framecells array[opt[st_obj_ref]];
};

deftype st_obj_num size;

deftype st_obj_ref struct {
  num st_obj_num;
  // The offset, in terms of bnnos
  offset u32;
  // The size, in terms of bnnos
  count u32;
};

func init_env(env *st_env, plat *platform_info, num_cells size) void {
  *env = {*plat, mk_array@[opt[st_value]](), repeat(num_cells, None())};
}

deftype st_symbol_name sym;

deftype st_symbolref struct {
  name st_symbol_name;
  offset u32;
  count u32;
};

deftype st_value struct {
  words array[u32];
  // Bits set to 1 for those bits (in [0:length)) that are not garbage, not covered by refs.
  datas array[u32];
  // The length of the value in bnnos.
  length u32;
  // Values of external symbol references -- they start at a bnno offset, and have some size that depends on what kind of symbolref it is (or what platform, some only have one kind).
  symbolrefs array[tup[u32, st_symbolref]];
  // Pointers to other objects -- they start at a bnno offset, and have a specific size (on the HP Saturn, 5 bnnos, or 20 bits).
  objrefs array[tup[u32, st_obj_ref]];
};

func ref_obj(env *st_env, num st_obj_num, out **st_value) bool {
  if case &Has(v st_value) = ref(&env->objects, num.~) {
    *out = &v;
    return true;
  } else {
    ERR(_u8("static evaluation accessing object that has been destroyed"));
    return false;
  }
}

func symbolref_size(env *st_env, sref *st_symbolref) u32 {
  return env->plat.fntraits.size;
}

func objref_size(env *st_env, oref *st_obj_ref) u32 {
  return env->plat.ptrtraits.size;
}

func copy_bnnos(plat *platform_info, src *array[u32], offset u32, count u32, dest *array[u32], dest_offset u32) void {
  bnno_size u32 = plat->bnno_size;
  mask u32 = (1 << bnno_size) - 1;
  per_word u32 = 32 / bnno_size;
  for i u32 = 0; i < count; i = i + 1 {
    si u32 = offset + i;
    x u32 = get(src, ~(si / per_word));
    y u32 = mask & (x >> (bnno_size * (si % per_word)));
    di u32 = dest_offset + i;
    d *u32 = ref(dest, ~(di / per_word));
    sh u32 = bnno_size * (di % per_word);
    z u32 = *d & ^(mask << sh);
    *d = z | (y << sh);
  }
}

func obj_read(env *st_env, oref st_obj_ref, out *st_value) bool {
  oref_end u32 = oref.offset + oref.count;
  val *st_value;
  if !ref_obj(env, oref.num, &val) {
    return false;
  }
  if oref_end > val->length {
    ice(_u8("static eval reading object out-of-bounds"));
  }
  refs array[tup[u32, st_symbolref]];
  val_nrefs size = count(&val->symbolrefs);
  for i size = 0; i < val_nrefs; i = i + 1 {
    vref *tup[u32, st_symbolref] = ref(&val->symbolrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + symbolref_size(env, &vref->cdr);
    if oref.offset <= vref_offset && vref_end <= oref_end {
      push(&refs, cons(vref_offset - oref.offset, vref->cdr));
    }
  }

  objrefs array[tup[u32, st_obj_ref]];
  val_nobjrefs size = count(&val->objrefs);
  for i size = 0; i < val_nobjrefs; i = i + 1 {
    vref *tup[u32, st_obj_ref] = ref(&val->objrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + objref_size(env, &vref->cdr);
    if oref.offset <= vref_offset && vref_end <= oref_end {
      push(&objrefs, cons(vref_offset - oref.offset, vref->cdr));
    }
  }

  bnnos_per_word u32 = 32 / env->plat.bnno_size;
  ws array[u32] = repeat(~ceil_divide(oref.count, bnnos_per_word), 0);
  copy_bnnos(&env->plat, &val->words, oref.offset, oref.count, &ws, 0);
  ds array[u32] = repeat(~ceil_divide(oref.count, bnnos_per_word), 0);
  copy_bnnos(&env->plat, &val->datas, oref.offset, oref.count, &ds, 0);

  *out = {ws, ds, oref.count, refs, objrefs};
  return true;
}

func obj_write(env *st_env, oref st_obj_ref, in *st_value) bool {
  if oref.count != in->length {
    ice(_u8("static eval writing object with non-matching length"));
  }
  oref_end u32 = oref.offset + oref.count;
  val *st_value;
  if !ref_obj(env, oref.num, &val) {
    return false;
  }
  if oref_end > val->length {
    ice(_u8("static eval writing object out-of-bounds"));
  }

  w size = 0;
  val_nrefs size = count(&val->symbolrefs);
  for i size = 0; i < val_nrefs; i = i + 1 {
    vref *tup[u32, st_symbolref] = ref(&val->symbolrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + symbolref_size(env, &vref->cdr);
    if vref_end <= oref.offset || oref_end <= vref_offset {
      set(&val->symbolrefs, w, *vref);
      w = w + 1;
    }
  }
  truncate(&val->symbolrefs, w);
  for i size = 0; i < count(&in->symbolrefs); i = i + 1 {
    sref *tup[u32, st_symbolref] = ref(&in->symbolrefs, i);
    push(&val->symbolrefs, cons(sref->car + oref.offset, sref->cdr));
  }

  w = 0;
  val_nobjrefs size = count(&val->objrefs);
  for i size = 0; i < val_nobjrefs; i = i + 1 {
    vref *tup[u32, st_obj_ref] = ref(&val->objrefs, i);
    vref_offset u32 = vref->car;
    vref_end u32 = vref_offset + objref_size(env, &vref->cdr);
    if vref_end <= oref.offset || oref_end <= vref_offset {
      set(&val->objrefs, w, *vref);
      w = w + 1;
    }
  }
  truncate(&val->objrefs, w);
  for i size = 0; i < count(&in->objrefs); i = i + 1 {
    iref *tup[u32, st_obj_ref] = ref(&in->objrefs, i);
    push(&val->objrefs, cons(iref->car + oref.offset, iref->cdr));
  }

  copy_bnnos(&env->plat, &in->words, 0, in->length, &val->words, oref.offset);
  copy_bnnos(&env->plat, &in->datas, 0, in->length, &val->datas, oref.offset);
  return true;
}


func cell_obj_ref(env *st_env, num cell_num) st_obj_ref {
  if case &Has(obj_ref st_obj_ref) = ref(&env->framecells, num.~) {
    return obj_ref;
  } else {
    ice(_u8("static eval accessing inactive cell"));
    return fake();
  }
}

func add_obj(env *st_env, size u32) st_obj_num {
  ret st_obj_num;
  ret.~ = count(&env->objects);
  push(&env->objects, Has(mk_st_value(&env->plat, size)));
  return ret;
}

func mk_st_value(plat *platform_info, size u32) st_value {
  zeros array[u32] = repeat(~ceil_divide(size, plat->bnno_size), 0);
  // Importantly, datas is initialized to all-zero, indicating all garbage.
  return {zeros, zeros, size, mk_array(), mk_array()};
}

func st_eval_def(cs *checkstate, ent def_entry_id, inst_id def_inst_id, out **st_value) bool {
  inst *def_inst = ref_inst(cs, inst_id);
  if inst->status != FinishedCheckingRhs(void) {
    ice(_u8("Evaling def we have not finished checking."));
  }
  switch &inst->rhs {
    case &InstRhsPrim(v void): {
      ice(_u8("st_eval_def on a prim def."));
      return fake();
    }
    case &InstRhsExtern(v void): {
      ice(_u8("st_eval_def on an extern def."));
      return fake();
    }
    case &InstRhsExpr(e ast_expr_consume): {
      check(is_defwise_trivial(&inst->computed_type_properties));
      switch &inst->evaled_value {
        case &NotComputed(v void): {
          inst->evaled_value = BeganComputing();
          env st_env;
          if case Has(info frame_info) = inst->frame_info {
            init_env(&env, &cs->platform, count(&info.cells));
          } else {
            ice(_u8("st_eval_def sees inst without num_frame_cells."));
          }
          result st_obj_ref;
          if !st_eval_expr(cs, &env, &e.expr, &result) {
            return false;
          }
          value st_value;
          if !obj_read(&env, result, &value) {
            return false;
          }
          inst->evaled_value = Computed(value);
          if case &Computed(x st_value) = &inst->evaled_value {
            *out = &x;
          } else {
            ice(_u8("locally impossible in st_eval_def"));
          }
          return true;
        }
        case &BeganComputing(v void): {
          ERR(_u8("recursively computing def inst's value"));
          return false;
        }
        case &FailedComputation(v void): {
          ERR(_u8("repeat error of st_eval_def"));
          return false;
        }
        case &Computed(x st_value): {
          *out = &x;
          return true;
        }
      }
    }
    case &InstRhsMagic(mag def_magic): {
      ice(_u8("st_eval_def exists at all..."));
      return fake();
    }
  }
}

func st_eval_expr(cs *checkstate, env *st_env, x *ast_expr, result_out *st_obj_ref) bool {
  switch &x->u {
    case &NameExpr(a ast_name_expr): {
      return st_eval_name_expr(cs, env, x, &a, result_out);
    }
    default: {
      return TODO();
    }
  }
}

func st_eval_name_expr(cs *checkstate, env *st_env, x *ast_expr, a *ast_name_expr, result_out *st_obj_ref) bool {
  if case &Has(info ast_name_expr_info) = &a->name_info {
    switch &info {
      case &LocalResolve(loc local_info): {
        // (Right now, there's no way a local variable could come into scope because static eval doesn't support lambda eval.)
        ice(_u8("st_eval_expr sees local variable reference"));
        return fake();
      }
      case &GlobalResolve(glo global_info): {
        val *st_value;
        if !st_eval_def(cs, glo.ent, glo.inst, &val) {
          return false;
        }
        // Global defs are trivially copyable.
        num st_obj_num = add_obj(env, val->length);
        oref st_obj_ref = {num, 0, val->length};
        obj_write(env, oref, val);
        *result_out = oref;
        return true;
      }
      case &EnumConstructor(ec enum_constructor_info): {
        // TODO: This should be supported!
        ERR(_u8("enum construction not supported in static evaluation"));
        return false;
      }
    }
  } else {
    ice(_u8("st_eval_expr seeing name_expr without info"));
    return fake();
  }
}
