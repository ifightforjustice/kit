import tok;

defenum allow_blanks {
  AllowBlanksNo void;
  AllowBlanksYes void;
};

defenum force_assignment {
  ForceAssignmentNo void;
  ForceAssignmentYes void;
};

// Used to indicate a "parse failure", grepabbly in case we want fancier handling later.
def Fail bool = false;

deftype prec_pair struct {
  left i32;
  right i32;
};

defenum prec_cmp {
  Conflicts void;
  PullsLeft void;
  PullsRight void;
};

// def[T] dbgparse fn[T, void] = debugstr;
inline func[T] dbgparse(x T) void { }

def kSemicolonPrec i32 = 205;
def kCommaPrec i32 = 205;
// Just enough to force assignment in conditionals to be parenthesized.
def kConditionPrec i32 = 305;
def kConversionRightPrec i32 = 905;

func parse_file(p *ps, out *ast_file) bool {
  dbgparse("parse_file\n");
  arr array[ast_toplevel];
  if !parse_toplevels(p, Eof(void), &arr) {
    return Fail;
  }
  *out = {arr};
  return true;
}

func parse_toplevels(p *ps, stop tokval, out *array[ast_toplevel]) bool {
  dbgparse("parse_toplevels\n");
  ret array[ast_toplevel];
  for ;; {
    if equal(&peek(p)->val, &stop) {
      *out = ret;
      return true;
    }
    top ast_toplevel;
    if !parse_toplevel(p, &top) {
      return Fail;
    }
    push(&ret, top);
  }
}

func try_parse_keyw(p *ps, expected keyw) opt[ast_meta] {
  if case &Keyw(k keyw) = &peek(p)->val {
    if k == expected {
      meta ast_meta = startend(p);
      step(p);
      return Has(meta);
    }
  }
  return None();  // Fail
}

func try_skip_keyw(p *ps, expected keyw) bool {
  if case &Keyw(k keyw) = &peek(p)->val {
    if k == expected {
      step(p);
      return true;
    }
  }
  return Fail;
}

func try_parse_token(p *ps, expected tokval) opt[ast_meta] {
  if equal(&peek(p)->val, &expected) {
    meta ast_meta = startend(p);
    step(p);
    return Has(meta);
  }
  return None();  // Fail
}

func try_skip_token(p *ps, expected tokval) bool {
  if equal(&peek(p)->val, &expected) {
    step(p);
    return true;
  }
  return Fail;
}

func try_parse_oper(p *ps, expected i32, out *ast_ident) bool {
  if case &Oper(arr shray[i32]) = &peek(p)->val {
    if count(&arr) == 1 && get(&arr, 0) == expected {
      m ast_meta = startend(p);
      *out = {m, intern(p->im, ~arr)};
      step(p);
      return true;
    }
  }
  return Fail;
}
func try_skip_oper(p *ps, expected i32) bool {
  if case &Oper(arr shray[i32]) = &peek(p)->val {
    if count(&arr) == 1 && get(&arr, 0) == expected {
      step(p);
      return true;
    }
  }
  return Fail;
}
func try_skip_oper(p *ps, exp0 i32, exp1 i32) bool {
  if case &Oper(arr shray[i32]) = &peek(p)->val {
    if count(&arr) == 2 && get(&arr, 0) == exp0 && get(&arr, 1) == exp1 {
      step(p);
      return true;
    }
  }
  return Fail;
}
func try_skip_oper(p *ps, exp0 i32, exp1 i32, exp2 i32) bool {
  if case &Oper(arr shray[i32]) = &peek(p)->val {
    if count(&arr) == 3 && get(&arr, 0) == exp0 && get(&arr, 1) == exp1 && get(&arr, 2) == exp2 {
      step(p);
      return true;
    }
  }
  return Fail;
}

func parse_toplevel(p *ps, out *ast_toplevel) bool {
  dbgparse("parse_toplevel\n");
  if try_skip_keyw(p, Func(void)) {
    return parse_rest_of_func(p, IsNotExport(void), IsNotInline(void), out);
  } else if try_skip_keyw(p, Def(void)) {
    return parse_rest_of_def(p, IsNotExport(void), IsNotVar(void), out);
  } else if try_skip_keyw(p, Var(void)) {
    return parse_rest_of_def(p, IsNotExport(void), IsVar(void), out);
  } else if try_skip_keyw(p, Export(void)) {
    if try_skip_keyw(p, Func(void)) {
      return parse_rest_of_func(p, IsExport(void), IsNotInline(void), out);
    } else if try_skip_keyw(p, Var(void)) {
      return parse_rest_of_def(p, IsExport(void), IsVar(void), out);
    } else if try_skip_keyw(p, Def(void)) {
      return parse_rest_of_def(p, IsExport(void), IsNotVar(void), out);
    }
    return Fail;
  } else if try_skip_keyw(p, Extern(void)) {
    return parse_rest_of_extern_def(p, out);
  } else if try_skip_keyw(p, Import(void)) {
    return parse_rest_of_import(p, out);
  } else if try_skip_keyw(p, Deftype(void)) {
    return parse_rest_of_deftype(p, out);
  } else if try_skip_keyw(p, Defclass(void)) {
    return parse_rest_of_defclass(p, out);
  } else if try_skip_keyw(p, Defenum(void)) {
    return parse_rest_of_defenum(p, out);
  } else if try_skip_keyw(p, Access(void)) {
    return parse_rest_of_access(p, out);
  } else if try_skip_specific_ident(p, "inline") {
    if !try_skip_keyw(p, Func(void)) {
      return Fail;
    }
    return parse_rest_of_func(p, IsNotExport(void), IsInline(void), out);
  } else {
    return Fail;
  }
}

// TODO: Have a specific AST datatype for funcs instead of munging them into ast_def.
func parse_rest_of_func(p *ps, is_export ast_isexport, is_inline ast_isinline, out *ast_toplevel) bool {
  generics ast_generics;
  name ast_ident;
  lambda_expr_meta ast_meta;
  params array[ast_vardecl];
  return_type ast_typeexpr;
  body ast_bracebody;
  if !(parse_def_generics_and_name(p, is_export, IsNotVar(void), &generics, &name)
       && parse_lambdaspec(p, &lambda_expr_meta, &params, &return_type, &body)) {
    return Fail;
  }

  *out = Def({is_export, IsNotVar(void), generics, name, None(),
              consume(mk(lambda_expr_meta, @[ast_expr_enum]Lambda({is_inline, params, return_type, {NotComputed@[ast_fullbody_info](), body}})))});
  return true;
}

func parse_rest_of_def(p *ps, is_export ast_isexport, is_var ast_isvar, out *ast_toplevel) bool {
  generics ast_generics;
  name ast_ident;
  if !parse_def_generics_and_name(p, is_export, is_var, &generics, &name) {
    return Fail;
  }

  typeexpr opt[ast_typeexpr];
  if try_skip_oper(p, '=') {
    typeexpr = None();
  } else {
    t ast_typeexpr;
    if !(parse_typeexpr(p, &t) && try_skip_oper(p, '=')) {
      return Fail;
    }
    typeexpr = Has(t);
  }

  rhs ast_expr;
  if !(parse_expr(p, kSemicolonPrec, &rhs)
       && try_skip_oper(p, ';')) {
    return Fail;
  }

  *out = Def({is_export, is_var, generics, name, typeexpr, consume(rhs)});
  return true;
}

func parse_rest_of_extern_def(p *ps, out *ast_toplevel) bool {
  name ast_ident;
  type ast_typeexpr;
  if !(parse_ident(p, &name)
       && parse_typeexpr(p, &type)
       && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = ExternDef({name, type});
  return true;
}

func parse_rest_of_import(p *ps, out *ast_toplevel) bool {
  dbgparse("parse_rest_of_import\n");
  name ast_ident;
  if !(parse_ident(p, &name) && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = Import({name});
  return true;
}

func parse_rest_of_deftype(p *ps, out *ast_toplevel) bool {
  generics ast_generics;
  name ast_ident;
  type ast_typeexpr;
  if !(parse_generics_if_present(p, &generics)
       && parse_ident(p, &name)
       && parse_typeexpr(p, &type)
       && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = TypeDef({generics, name, TypeexprRhs(type)});
  return true;
}

func parse_rest_of_defclass(p *ps, out *ast_toplevel) bool {
  generics ast_generics;
  if !parse_generics_if_present(p, &generics) {
    return Fail;
  }
  disposition ast_defclass_disposition;
  // TODO: Honestly this is bad syntax, now that copy and move aren't keywords.
  if try_skip_specific_ident(p, "copy") {
    disposition = DefaultCopyMoveDestroy(void);
  } else if try_skip_specific_ident(p, "move") {
    disposition = DefaultMove(void);
  } else {
    disposition = NoDefaults(void);
  }
  name ast_ident;
  type ast_typeexpr;
  if !(parse_ident(p, &name) && parse_typeexpr(p, &type)
       && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = TypeDef({generics, name, ClassexprRhs({disposition, type})});
  return true;
}

func parse_rest_of_defenum(p *ps, out *ast_toplevel) bool {
  generics ast_generics;
  name ast_ident;
  enumfields array[ast_vardecl];
  if !(parse_generics_if_present(p, &generics)
       && parse_ident(p, &name)
       && parse_braced_fields(p, &enumfields)
       && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = TypeDef({generics, name,
                  TypeexprRhs(@[ast_typeexpr]Enum({enumfields}))});
  return true;
}

func parse_rest_of_access(p *ps, out *ast_toplevel) bool {
  name ast_ident;
  if !parse_ident(p, &name) {
    return Fail;
  }
  arity ast_access_arity;
  if !try_skip_token(p, @[tokval]Grouper(LBracket(void))) {
    arity = AccessArityNone(void);
  } else {
    counter u32 = 0;
    done bool = false;
    while !done {
      if try_skip_token(p, @[tokval]Grouper(RBracket(void))) {
        done = true;
      } else {
        if counter != 0 {
          if !try_skip_oper(p, ',') {
            return Fail;
          }
        }
        if !try_skip_keyw(p, Underscore(void)) {
          return Fail;
        }
        counter = counter + 1;
      }
    }
    arity = AccessArityFinite(counter);
  }

  toplevels array[ast_toplevel];
  if !(try_skip_token(p, @[tokval]Grouper(LBrace(void)))
       && parse_toplevels(p, @[tokval]Grouper(RBrace(void)), &toplevels)
       && try_skip_token(p, @[tokval]Grouper(RBrace(void)))) {
    return Fail;
  }
  *out = Access({name, arity, toplevels});
  return true;
}

func parse_def_generics_and_name(p *ps, is_export ast_isexport, is_var ast_isvar,
                                 generics_out *ast_generics, name_out *ast_ident) bool {
  switch is_export {
  case IsExport(v):
    *generics_out = NoGenerics(void);
  case IsNotExport(v):
    switch is_var {
      case IsVar(v2): {
        *generics_out = NoGenerics(void);
      }
      case IsNotVar(v2): {
        if !parse_generics_if_present(p, generics_out) {
          return Fail;
        }
      }
    }
  }
  if !parse_ident(p, name_out) {
    return Fail;
  }
  return true;
}

func parse_lambdaspec(p *ps, lambda_expr_meta_out *ast_meta, params_out *array[ast_vardecl], return_type_out *ast_typeexpr, body_out *ast_bracebody) bool {
  m ast_meta = start(p);
  if !(parse_args_list(p, params_out) && parse_typeexpr(p, return_type_out) && parse_bracebody(p, body_out)) {
    return Fail;
  }
  end(p, m);
  *lambda_expr_meta_out = m;
  return true;
}

func parse_typeexpr(p *ps, out *ast_typeexpr) bool {
  return help_parse_typeexpr(p, AllowBlanksNo(void), out);
}

func parse_ident(p *ps, out *ast_ident) bool {
  return try_parse_ident(p, out);
}

func parse_rest_of_backtick_ident(p *ps, ident_meta ast_meta, out *ast_ident) bool {
  switch peek(p)->val {
  default:
    return Fail;
  // TODO: "Opers" such as "@" or maybe even "=" shouldn't really be allowed here -- only functional opers allowed.
  // TODO: We probably should not allow "` + `" to parse -- require tight quoting, do this at tokenization.
  case Oper(operch shray[i32]):
    step(p);
    if !try_skip_token(p, Backtick(void)) {
      return Fail;
    }
    end(p, ident_meta);
    *out = {ident_meta, intern(p->im, ~operch)};
    return true;
  }
}

func try_parse_ident(p *ps, out *ast_ident) bool {
  dbgparse("try_parse_ident\n");
  switch peek(p)->val {
  case Ident(text shray[i32]):
    m ast_meta = startend(p);
    step(p);
    *out = {m, intern(p->im, ~text)};
    return true;
  case Backtick(v void):
    ident_meta ast_meta = start(p);
    step(p);
    return parse_rest_of_backtick_ident(p, ident_meta, out);
  default:
    return Fail;
  }
}

// Takes a [_]u8.
func[T] try_skip_specific_ident(p *ps, x T) bool {
  dbgparse("try_skip_specific_ident\n");
  switch peek(p)->val {
  case Ident(text shray[i32]):
    if count(&text) != x.length {
      return Fail;
    }
    y *i32 = data(&text);
    for i size = 0; i < x.length; i = i + 1 {
      if y[i] != ~x[i] {
        return Fail;
      }
    }
    m ast_meta = startend(p);
    step(p);
    return true;
  case Backtick(v void):
    // No caller expects a backtick ident.
    return Fail;
  default:
    return Fail;
  }
}

func parse_generics_if_present(p *ps, out *ast_generics) bool {
  args array[ast_ident];
  if !try_skip_token(p, @[tokval]Grouper(LBracket(void))) {
    *out = NoGenerics(void);
    return true;
  }
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(RBracket(void))) {
      *out = HasGenerics(args);
      return true;
    }
    if count(&args) != 0 {
      if !try_skip_oper(p, ',') {
        return Fail;
      }
    }
    arg ast_ident;
    if !parse_ident(p, &arg) {
      return Fail;
    }
    push(&args, arg);
  }
}

func parse_args_list(p *ps, out *array[ast_vardecl]) bool {
  if !try_skip_token(p, @[tokval]Grouper(LParen(void))) {
    return Fail;
  }
  args array[ast_vardecl];
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(RParen(void))) {
      *out = args;
      return true;
    }
    if count(&args) != 0 {
      if !try_skip_oper(p, ',') {
        return Fail;
      }
    }
    decl ast_vardecl;
    if !parse_vardecl(p, AllowBlanksNo(void), &decl) {
      return Fail;
    }
    push(&args, decl);
  }
}

func triparse_bracebody(p *ps, out *ast_bracebody) triparse_result {
  if !try_skip_token(p, @[tokval]Grouper(LBrace(void))) {
    return Quickfail(void);
  }
  statements array[ast_statement];
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(RBrace(void))) {
      *out = {NotComputed@[ast_bracebody_info](), statements};
      return Success(void);
    }
    statement ast_statement;
    if !parse_statement(p, &statement) {
      return Error(void);
    }
    push(&statements, statement);
  }
}

func parse_bracebody(p *ps, out *ast_bracebody) bool {
  switch triparse_bracebody(p, out) {
  case Success(v void): return true;
  default: return Fail;
  }
}

func try_underscore_if_allowed(p *ps, ab allow_blanks, out *ast_typeexpr) bool {
  switch ab {
    case AllowBlanksYes(v): {
      if try_skip_keyw(p, Underscore(void)) {
        *out = Unknown({});
        return true;
      }
      return Fail;
    }
    case AllowBlanksNo(v): {
      return Fail;
    }
  }
}

func help_parse_typeexpr(p *ps, ab allow_blanks, out *ast_typeexpr) bool {
  switch help_triparse_typeexpr(p, ab, out) {
    case Success(v): { return true; }
    default: { return Fail; }
  }
}

inline func success_or_fail(res bool) triparse_result {
  if res {
    return Success(void);
  } else {
    return Error(void);
  }
}

func help_triparse_typeexpr(p *ps, ab allow_blanks, out *ast_typeexpr) triparse_result {
  voidmeta ast_meta;
  if case Has(m ast_meta) = try_parse_keyw(p, Void(void)) {
    *out = Name({m, p->im->cym.voidsym});
    return Success(void);
  }
  if try_skip_keyw(p, Struct(void)) {
    return success_or_fail(parse_rest_of_struct(p, out));
  }
  if try_skip_keyw(p, Enum(void)) {
    return success_or_fail(parse_rest_of_enum(p, out));
  }
  if try_skip_keyw(p, Union(void)) {
    return success_or_fail(parse_rest_of_union(p, out));
  }
  if try_skip_token(p, @[tokval]Grouper(LBracket(void))) {
    return success_or_fail(parse_rest_of_arraytype(p, ab, out));
  }
  oper ast_ident;
  if try_parse_oper(p, '*', &oper) {
    return success_or_fail(parse_rest_of_pointer(p, ab, oper, out));
  }

  lhs ast_typeexpr;
  if !try_underscore_if_allowed(p, ab, &lhs) {
    name ast_ident;
    if !try_parse_ident(p, &name) {
      return Quickfail(void);
    }
    lhs = Name(name);
  }
  if !try_skip_token(p, @[tokval]Grouper(LBracket(void))) {
    *out = lhs;
    return Success(void);
  }
  args array[ast_typeexpr];
  if !parse_rest_of_type_param_list(p, ab, &args) {
    return Error(void);
  }
  // TODO: Allow arbitrarily many type applications?
  *out = App({embox(lhs), args});
  return Success(void);
}

func parse_rest_of_struct(p *ps, out *ast_typeexpr) bool {
  fields array[ast_vardecl];
  if !parse_braced_fields(p, &fields) {
    return Fail;
  }
  *out = Struct({fields});
  return true;
}

func parse_rest_of_enum(p *ps, out *ast_typeexpr) bool {
  fields array[ast_vardecl];
  if !parse_braced_fields(p, &fields) {
    return Fail;
  }
  *out = Enum({fields});
  return true;
}

func parse_rest_of_union(p *ps, out *ast_typeexpr) bool {
  fields array[ast_vardecl];
  if !parse_braced_fields(p, &fields) {
    return Fail;
  }
  *out = Union({fields});
  return true;
}

func parse_rest_of_arraytype(p *ps, ab allow_blanks, out *ast_typeexpr) bool {
  switch ab {
    case AllowBlanksYes(v): {
      if try_skip_keyw(p, Underscore(void)) {
        param box[ast_typeexpr];
        if !(try_skip_token(p, @[tokval]Grouper(RBracket(void)))
             && help_parse_typeexpr(p, ab, oo(&param))) {
          return Fail;
        }

        *out = Arraytype({None(), param});
        return true;
      }
    }
    default: { }
  }

  count box[ast_expr];
  param box[ast_typeexpr];
  if !(parse_expr(p, kSemicolonPrec, oo(&count))
       && try_skip_token(p, @[tokval]Grouper(RBracket(void)))
       && parse_typeexpr(p, oo(&param))) {
    return Fail;
  }

  *out = Arraytype({Has(count), param});
  return true;
}

func parse_rest_of_pointer(p *ps, ab allow_blanks, oper ast_ident, out *ast_typeexpr) bool {
  arg ast_typeexpr;
  if !help_parse_typeexpr(p, ab, &arg) {
    return Fail;
  }
  *out = App({embox(Name(oper)),
              mk_array(arg)});
  return true;
}

func parse_rest_of_type_param_list(p *ps, ab allow_blanks, out *array[ast_typeexpr]) bool {
  args array[ast_typeexpr];
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(RBracket(void))) {
      *out = args;
      return true;
    }

    if count(&args) != 0 {
      if !try_skip_oper(p, ',') {
        return Fail;
      }
    }

    typeexpr ast_typeexpr;
    if !help_parse_typeexpr(p, ab, &typeexpr) {
      return Fail;
    }
    push(&args, typeexpr);
  }
}


func parse_braced_fields(p *ps, out *array[ast_vardecl]) bool {
  if !try_skip_token(p, @[tokval]Grouper(LBrace(void))) {
    return Fail;
  }
  fields array[ast_vardecl];
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(RBrace(void))) {
      *out = fields;
      return true;
    }

    field ast_vardecl;
    if !(parse_vardecl(p, AllowBlanksNo(void), &field)
         && try_skip_oper(p, ';')) {
      return Fail;
    }
    push(&fields, field);
  }
}

func parse_vardecl(p *ps, ab allow_blanks, out *ast_vardecl) bool {
  name ast_ident;
  if !parse_ident(p, &name) {
    return Fail;
  }

  switch ab {
    case AllowBlanksYes(v): {
      type ast_typeexpr;
      switch help_triparse_typeexpr(p, ab, &type) {
        case Success(v2): {
          *out = {name, type};
          return true;
        }
        case Quickfail(v2): {
          *out = {name, Unknown({})};
          return true;
        }
        case Error(v2): {
          return Fail;
        }
      }
    }
    case AllowBlanksNo(v): {
      type ast_typeexpr;
      if !help_parse_typeexpr(p, ab, &type) {
        return Fail;
      }
      *out = {name, type};
      return true;
    }
  }
}

func parse_expr(p *ps, prec_ctx i32, out *ast_expr) bool {
  lhs ast_expr;
  if !parse_atomic_expr(p, &lhs) {
    return Fail;
  }

  return parse_after_atomic_expr(p, prec_ctx, lhs, out);
}

func parse_after_atomic_expr(p *ps, prec_ctx i32, lhs ast_expr, out *ast_expr) bool {
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(LParen(void))) {
      params array[ast_expr_consume];
      if !parse_rest_of_param_list(p, &params) {
        return Fail;
      }
      m ast_meta = copyend(p, lhs.meta);
      lhs = mk(m, @[ast_expr_enum]Funcall({embox(consume(lhs)), params}));
    } else if try_skip_token(p, @[tokval]Grouper(LBracket(void))) {
      arg ast_expr;
      if !(parse_expr(p, kCommaPrec, &arg)
           && try_skip_token(p, @[tokval]Grouper(RBracket(void)))) {
        return Fail;
      }
      m ast_meta = copyend(p, lhs.meta);
      lhs = mk(m, @[ast_expr_enum]IndexExpr(mk(embox(lhs), embox(consume(arg)))));
    } else if try_skip_oper(p, '.', '~') {
      m ast_meta = copyend(p, lhs.meta);
      lhs = mk(m, @[ast_expr_enum]LocalField(@[ast_local_field]mk(embox(lhs), WholeField(void))));
    } else if try_skip_oper(p, '.') {
      fieldname ast_ident;
      if !parse_ident(p, &fieldname) {
        return Fail;
      }
      m ast_meta = copyend(p, lhs.meta);
      lhs = mk(m, @[ast_expr_enum]LocalField(@[ast_local_field]mk(embox(lhs), NameField(fieldname))));
    } else if try_skip_oper(p, '-', '>', '~') {
      m ast_meta = copyend(p, lhs.meta);
      lhs = mk(m, @[ast_expr_enum]DerefField({NotComputed@[ast_deref_field_info](), mk_later(), embox(consume(lhs)), WholeField(void)}));
    } else if try_skip_oper(p, '-', '>') {
      fieldname ast_ident;
      if !parse_ident(p, &fieldname) {
        return Fail;
      }
      m ast_meta = copyend(p, lhs.meta);
      lhs = mk(m, @[ast_expr_enum]DerefField({NotComputed@[ast_deref_field_info](), mk_later(), embox(consume(lhs)), NameField(fieldname)}));
    } else if is_binop(peek(p)->val) {
      op tok = *peek(p);
      op_prec prec_pair = binop_prec(op.val);
      switch compare_prec(prec_ctx, op_prec.left) {
        case Conflicts(v): {
          return Fail;
        }
        case PullsLeft(v): {
          *out = lhs;
          return true;
        }
        case PullsRight(v): {
          oper ast_ident = {startend(p), intern(p->im, ~oper_arr(op.val))};
          step(p);
          rhs ast_expr;
          if !parse_expr(p, op_prec.right, &rhs) {
            return Fail;
          }
          m ast_meta = copyend(p, lhs.meta);
          lhs = build_binop_expr(p->im, m, oper, lhs, rhs);
        }
      }
    } else {
      *out = lhs;
      return true;
    }
  }
}

func is_binop(t tokval) bool {
  switch binop_info(t) {
    case Has(x): { return true; }
    case None(v): { return false; }
  }
}

func binop_prec(t tokval) prec_pair {
  switch binop_info(t) {
    case Has(x): { return x; }
    case None(v): { check(false); return fake(); }
  }
}

func binop_info(t tokval) opt[prec_pair] {
  switch t {
    default: { return None(); }
    case Oper(x shray[i32]): {
      if count(&x) == 1 {
        c0 i32 = get(&x, 0);
        if c0 == '=' { return Has({306, 304}); }
        if c0 == '+' || c0 == '-' { return Has({504, 506}); }
        if c0 == '<' || c0 == '>' { return Has({405, 405}); }
        if c0 == '*' || c0 == '/' { return Has({604, 606}); }
        if c0 == '%' { return Has({605, 605}); }
        if c0 == '^' || c0 == '&' || c0 == '|' { return Has({405, 405}); }
        return None();
      }
      if count(&x) == 2 {
        c0 i32 = get(&x, 0);
        c1 i32 = get(&x, 1);
        if c0 == '&' && c1 == '&' { return Has({376, 374}); }
        if c0 == '|' && c1 == '|' { return Has({356, 354}); }
        if (c0 == '<' && c1 == '<') || (c0 == '>' && c1 =='>') {
          return Has({405, 405});
        }
        if c1 == '=' && (c0 == '=' || c0 == '<' || c0 == '>' || c0 == '!') {
          return Has({405, 405});
        }
        if c1 == '=' && (c0 == '%' || c0 == '&' || c0 == '*'
                         || c0 == '-' || c0 == '+' || c0 == '|'
                         || c0 == '/') {
          return Has({306, 304});
        }
        return None();
      }
      if count(&x) == 3 {
        c0 i32 = get(&x, 0);
        c1 i32 = get(&x, 1);
        c2 i32 = get(&x, 2);
        if c2 == '=' && ((c0 == '<' && c1 == '<')
                         || (c0 == '>' && c1 == '>')) {
          return Has({306, 304});
        }
        return None();
      }
      return None();
    }
  }
}

func compare_prec(left i32, right i32) prec_cmp {
  if left + 1 < right { return PullsRight(void); }
  if right + 1 < left { return PullsLeft(void); }
  return Conflicts(void);
}

func oper_arr(tv tokval) shray[i32] {
  switch tv {
    case Oper(arr shray[i32]): { return arr; }
    default: { check(false); return fake(); }
  }
}

func build_unop_expr(im *identmap, m ast_meta, op ast_ident, rhs ast_expr) ast_expr {
  if op.value == im->cym.addressofsym {
    return mk(m, @[ast_expr_enum]AddressOf({embox(rhs)}));
  } else if op.value == im->cym.derefsym {
    return mk(m, @[ast_expr_enum]Deref({mk_later(), embox(consume(rhs))}));
  } else {
    return mk(m, @[ast_expr_enum]Funcall({embox(consume(mk(op.meta, @[ast_expr_enum]NameExpr(mk(op, None()))))), mk_array(consume(rhs))}));
  }
}

func build_binop_expr(im *identmap, m ast_meta, op ast_ident, lhs ast_expr, rhs ast_expr) ast_expr {
  if op.value == im->cym.assignmentsym {
    return mk(m, @[ast_expr_enum]Assignment({NotComputed@[ast_assignment_info](), embox(lhs), embox(rhs)}));
  } else if op.value == im->cym.logical_and_sym {
    return mk(m, @[ast_expr_enum]LogicalConjunction({false, embox(consume(lhs)), embox(consume(rhs))}));
  } else if op.value == im->cym.logical_or_sym {
    return mk(m, @[ast_expr_enum]LogicalConjunction({true, embox(consume(lhs)), embox(consume(rhs))}));
  } else {
    return mk(m, @[ast_expr_enum]Funcall({embox(consume(mk(op.meta, @[ast_expr_enum]NameExpr(mk(op, None()))))),
                                          mk_array(consume(lhs), consume(rhs))}));
  }
}

func parse_finish_name_expr(p *ps, ident ast_ident, out *ast_expr) bool {
  switch peek(p)->val {
    case Oper(operch shray[i32]): {
      if is_at_sign(&operch) {
        step(p);
        args array[ast_typeexpr];
        if !(try_skip_token(p, @[tokval]Grouper(LBracket(void)))
             && parse_rest_of_type_param_list(p, AllowBlanksNo(void), &args)) {
          return Fail;
        }
        *out = mk(ident.meta, NameExpr(mk(ident, Has(args))));
        return true;
      }
    }
    default: { }
  }
  *out = mk(ident.meta, NameExpr(mk(ident, None())));
  return true;
}

func parse_atomic_expr_upon_keyw(p *ps, k keyw, out *ast_expr) bool {
  switch k {
    case Func(v): {
      step(p);
      return parse_rest_of_lambda(p, out);
    }
    case True(v): {
      m ast_meta = startend(p);
      step(p);
      *out = mk(m, @[ast_expr_enum]BoolLiteral({m, true}));
      return true;
    }
    case False(v): {
      m ast_meta = startend(p);
      step(p);
      *out = mk(m, @[ast_expr_enum]BoolLiteral({m, false}));
      return true;
    }
    case Void(v): {
      m ast_meta = startend(p);
      step(p);
      *out = mk(m, @[ast_expr_enum]VoidLiteral({m}));
      return true;
    }
    case Null(v): {
      m ast_meta = startend(p);
      step(p);
      *out = mk(m, @[ast_expr_enum]NullLiteral({m}));
      return true;
    }
    default: {
      return Fail;
    }
  }
}

func parse_atomic_expr_upon_num(p *ps, n *numlit, out *ast_expr) bool {
  num_meta ast_meta = startend(p);
  switch n {
    case &DecNum(arr shray[i8]): {
      step(p);
      *out = mk(num_meta, @[ast_expr_enum]NumericLiteral(@[ast_numeric_literal]DecLiteral({num_meta, arr})));
      return true;
    }
    case &HexNum(arr shray[i8]): {
      step(p);
      *out = mk(num_meta, @[ast_expr_enum]NumericLiteral(@[ast_numeric_literal]HexLiteral({num_meta, arr})));
      return true;
    }
  }
}

func parse_atomic_expr_upon_grouper(p *ps, g grouper, out *ast_expr) bool {
  m ast_meta = start(p);
  switch g {
    case LParen(v): {
      step(p);
      expr ast_expr;
      if !(parse_expr(p, kSemicolonPrec, &expr)
           && try_skip_token(p, @[tokval]Grouper(RParen(void)))) {
        return Fail;
      }
      end(p, m);
      *out = mk(m, @[ast_expr_enum]ParenExpr({embox(expr)}));
      return true;
    }
    case LBrace(v): {
      step(p);
      // TODO: Have some way to prevent naked struct initializers in a condition expression.
      return parse_rest_of_strinit(p, m, out);
    }
    default: { return Fail; }
  }
}

func parse_atomic_expr_upon_oper(p *ps, operch *shray[i32], out *ast_expr) bool {
  m ast_meta = start(p);
  if is_at_sign(operch) {
    step(p);
    type ast_typeexpr;
    expr ast_expr;
    if !(try_skip_token(p, @[tokval]Grouper(LBracket(void)))
         && help_parse_typeexpr(p, AllowBlanksYes(void), &type)
         && try_skip_token(p, @[tokval]Grouper(RBracket(void)))
         && parse_expr(p, kConversionRightPrec, &expr)) {
      return Fail;
    }
    end(p, m);
    *out = mk(m, @[ast_expr_enum]TypedExpr({type, embox(expr)}));
    return true;
  } else {
    switch unop_info(operch) {
      case None(v): { return Fail; }
      case Has(rightprec i32): {
        oper_meta ast_meta = startend(p);
        step(p);
        rhs ast_expr;
        if !parse_expr(p, rightprec, &rhs) {
          return Fail;
        }
        end(p, m);
        *out = build_unop_expr(p->im, m, {oper_meta, intern(p->im, ~ *operch)}, rhs);
        return true;
      }
    }
  }
}

func parse_atomic_expr_upon_stringdelim(p *ps, ch i32, out *ast_expr) bool {
  if ch == '\"' {
    m ast_meta = start(p);
    string_step(p, '\"');
    return parse_rest_of_string_literal(p, m, out);
  } else if ch == '\'' {
    m ast_meta = start(p);
    string_step(p, '\'');
    return parse_rest_of_char_literal(p, m, out);
  } else {
    ice(_u8("StringDelim with bad ch"));
    return fake();
  }
}

func parse_atomic_expr(p *ps, out *ast_expr) bool {
  switch peek(p)->val {
    case Keyw(k keyw):
      return parse_atomic_expr_upon_keyw(p, k, out);
    case Num(n numlit):
      return parse_atomic_expr_upon_num(p, &n, out);
    case Grouper(g grouper):
      return parse_atomic_expr_upon_grouper(p, g, out);
    case Ident(identch shray[i32]):
      ident_meta ast_meta = startend(p);
      step(p);
      return parse_finish_name_expr(p, {ident_meta, intern(p->im, ~identch)}, out);
    case Oper(operch shray[i32]):
      return parse_atomic_expr_upon_oper(p, &operch, out);
    case StringDelim(ch i32):
      return parse_atomic_expr_upon_stringdelim(p, ch, out);
    case Backtick(v): {
      ident_meta ast_meta = start(p);
      step(p);
      ident ast_ident;
      if !parse_rest_of_backtick_ident(p, ident_meta, &ident) {
        return Fail;
      }
      return parse_finish_name_expr(p, ident, out);
    }
    case Bad(v): {
      return Fail;
    }
    case Eof(v): {
      return Fail;
    }
  }
}

func unop_info(operch *shray[i32]) opt[i32] {
  if count(operch) != 1 {
    return None();
  }
  ch0 i32 = get(operch, 0);
  if ch0 == '~' || ch0 == '*' || ch0 == '&'
     || ch0 == '-' || ch0 == '!' || ch0 == '^' {
    return Has(905);
  }
  return None();
}

func is_equal(arr *shray[i32], v0 i32) bool {
  return count(arr) == 1 && get(arr, 0) == v0;
}

func is_at_sign(operch *shray[i32]) bool {
  return is_equal(operch, '@');
}

func parse_rest_of_lambda(p *ps, out *ast_expr) bool {
  // TODO: Uh, the meta should start a bit earlier, no?
  lambda_expr_meta ast_meta;
  args array[ast_vardecl];
  return_type ast_typeexpr;
  body ast_bracebody;
  if !parse_lambdaspec(p, &lambda_expr_meta, &args, &return_type, &body) {
    return Fail;
  }
  *out = mk(lambda_expr_meta, @[ast_expr_enum]Lambda({IsNotInline(void), args, return_type, {NotComputed@[ast_fullbody_info](), body}}));
  return true;
}

func parse_rest_of_strinit(p *ps, m ast_meta, out *ast_expr) bool {
  ecs array[ast_expr_consume];
  if !parse_rest_of_expr_list(p, RBrace(void), &ecs) {
    return Fail;
  }
  params array[ast_strinit_param];
  necs size = count(&ecs);
  for i size = 0; i < necs; i = i + 1 {
    push(&params, {NotComputed@[ast_strinit_param_info](), get(&ecs, i)});
  }
  end(p, m);
  *out = mk(m, @[ast_expr_enum]Strinit({m, params}));
  return true;
}

func parse_rest_of_param_list(p *ps, out *array[ast_expr_consume]) bool {
  return parse_rest_of_expr_list(p, RParen(void), out);
}

func parse_rest_of_expr_list(p *ps, stop grouper, out *array[ast_expr_consume]) bool {
  exprs array[ast_expr_consume];
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(stop)) {
      *out = exprs;
      return true;
    }
    if count(&exprs) != 0 {
      if !try_skip_oper(p, ',') {
        return Fail;
      }
    }
    expr ast_expr;
    if !parse_expr(p, kCommaPrec, &expr) {
      return Fail;
    }
    push(&exprs, consume(expr));
  }
}

func parse_statement(p *ps, out *ast_statement) bool {
  switch peek(p)->val {
    case Keyw(k): {
      switch k {
        case Var(v): {
          step(p);
          return parse_rest_of_var_statement(p, out);
        }
        case Return(v): {
          step(p);
          return parse_rest_of_return_statement(p, out);
        }
        case If(v): {
          step(p);
          return parse_rest_of_if_statement(p, out);
        }
        case While(v): {
          step(p);
          return parse_rest_of_while_statement(p, out);
        }
        case For(v): {
          step(p);
          return parse_rest_of_for_statement(p, out);
        }
        case Switch(v): {
          step(p);
          return parse_rest_of_switch_statement(p, out);
        }
        case Label(v): {
          step(p);
          return parse_rest_of_label_statement(p, out);
        }
        case Goto(v): {
          step(p);
          return parse_rest_of_goto_statement(p, out);
        }
        default: { }
      }
    }
    default: { }
  }
  return parse_naked_var_or_expr_statement(p, ForceAssignmentNo(void), out);
}

func parse_rest_of_label_statement(p *ps, out *ast_statement) bool {
  name ast_ident;
  if !(parse_ident(p, &name) && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = Label({NotComputed@[ast_label_statement_info](), name});
  return true;
}

func parse_rest_of_goto_statement(p *ps, out *ast_statement) bool {
  target ast_ident;
  if !(parse_ident(p, &target) && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = Goto({NotComputed@[ast_goto_statement_info](), target});
  return true;
}

func parse_rest_of_var_statement(p *ps, out *ast_statement) bool {
  decl ast_vardecl;
  if !parse_vardecl(p, AllowBlanksYes(void), &decl) {
    return Fail;
  }

  if try_skip_oper(p, ';') {
    *out = Var({NotComputed@[ast_var_info](), decl, AutoInit(None())});
    return true;
  }

  rhs ast_expr;
  if !(try_skip_oper(p, '=')
       && parse_expr(p, kSemicolonPrec, &rhs)
       && try_skip_oper(p, ';')) {
    return Fail;
  }

  *out = Var({NotComputed@[ast_var_info](), decl, HasExpr(embox(consume(rhs)))});
  return true;
}

func parse_rest_of_return_statement(p *ps, out *ast_statement) bool {
  if try_skip_oper(p, ';') {
    *out = Return({NotComputed@[ast_return_statement_info](), None()});
    return true;
  }
  expr ast_expr;
  if !(parse_expr(p, kSemicolonPrec, &expr)
       && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = Return({NotComputed@[ast_return_statement_info](), Has(embox(consume(expr)))});
  return true;
}

func parse_condition(p *ps, out *ast_condition) bool {
  m ast_meta = start(p);
  if try_skip_keyw(p, Case(void)) {
    conspatt ast_constructor_pattern;
    rhs ast_expr;
    if !(parse_rest_of_constructor_pattern(p, m, &conspatt)
         && try_skip_oper(p, '=')
         && parse_expr(p, kConditionPrec, &rhs)) {
      return Fail;
    }
    *out = PatternCondition({NotComputed@[ast_pattern_assign_info](), conspatt, embox(consume(rhs))});
    return true;
  } else {
    condition ast_expr;
    if !parse_expr(p, kConditionPrec, &condition) {
      return Fail;
    }
    *out = ExprCondition(embox(consume(condition)));
    return true;
  }
}

func mk_condition_discard_info() ast_condition_discard_info {
  return {NotComputed(), mk_later()};
}

func parse_rest_of_if_statement(p *ps, out *ast_statement) bool {
  condition ast_condition;
  thenbody ast_bracebody;
  if !(parse_condition(p, &condition)
       && parse_bracebody(p, &thenbody)) {
    return Fail;
  }

  if !try_skip_keyw(p, Else(void)) {
    *out = IfThen({mk_condition_discard_info(), condition, thenbody});
    return true;
  }

  if try_skip_keyw(p, If(void)) {
    elseif ast_statement;
    if !parse_rest_of_if_statement(p, &elseif) {
      return Fail;
    }
    *out = IfThenElse({mk_condition_discard_info(), condition, thenbody, {NotComputed@[ast_bracebody_info](), mk_array(elseif)}});
    return true;
  }
  elsebody ast_bracebody;
  if !parse_bracebody(p, &elsebody) {
    return Fail;
  }
  *out = IfThenElse({mk_condition_discard_info(), condition, thenbody, elsebody});
  return true;
}

func parse_rest_of_while_statement(p *ps, out *ast_statement) bool {
  condition ast_condition;
  body ast_bracebody;
  if !(parse_condition(p, &condition)
       && parse_bracebody(p, &body)) {
    return Fail;
  }
  *out = While({mk_condition_discard_info(), mk_condition_discard_info(), condition, body});
  return true;
}

func parse_rest_of_for_statement(p *ps, out *ast_statement) bool {
  initializer opt[box[ast_statement]];
  if try_skip_oper(p, ';') {
    initializer = None();
  } else {
    statement box[ast_statement];
    if try_skip_keyw(p, Var(void)) {
      if !parse_rest_of_var_statement(p, oo(&statement)) {
        return Fail;
      }
    } else {
      if !parse_naked_var_or_expr_statement(p, ForceAssignmentYes(void), oo(&statement)) {
        return Fail;
      }
    }
    initializer = Has(statement);
  }
  condition opt[ast_for_condition];
  if try_skip_oper(p, ';') {
    condition = None();
  } else {
    expr ast_expr;
    if !(parse_expr(p, kConditionPrec, &expr)
         && try_skip_oper(p, ';')) {
      return Fail;
    }
    condition = Has({mk_later(), embox(consume(expr))});
  }
  increment opt[box[ast_expr_discard]];
  lbrace tokval = Grouper(LBrace(void));
  if equal(&peek(p)->val, &lbrace) {
    increment = None();
  } else {
    expr ast_expr;
    if !parse_expr(p, kSemicolonPrec, &expr) {
      return Fail;
    }
    increment = Has(embox(discard(expr)));
  }

  body ast_bracebody;
  if !parse_bracebody(p, &body) {
    return Fail;
  }
  *out = For({NotComputed@[ast_for_statement_info](), initializer, condition, increment, body});
  return true;
}

func parse_rest_of_switch_statement(p *ps, out *ast_statement) bool {
  swartch ast_expr;
  if !(parse_expr(p, kConditionPrec, &swartch)
       && try_skip_token(p, @[tokval]Grouper(LBrace(void)))) {
    return Fail;
  }

  cases array[ast_switch_case];
  for ;; {
    if try_skip_token(p, @[tokval]Grouper(RBrace(void))) {
      *out = Switch({NotComputed@[ast_enum_deconstruction_info](), mk_later(), embox(consume(swartch)), cases});
      return true;
    }
    cas ast_switch_case;
    if !parse_switch_case(p, &cas) {
      return Fail;
    }
    push(&cases, cas);
  }
}

func parse_switch_case(p *ps, out *ast_switch_case) bool {
  pattern ast_case_pattern;
  body ast_bracebody;
  if !(parse_case_pattern(p, &pattern)
       && try_skip_oper(p, ':')) {
    return Fail;
  }
  switch triparse_bracebody(p, &body) {
    case Success(v void): { }
    case Quickfail(v void):
      statements array[ast_statement];
      done bool = false;
      casekeyw tokval = Keyw(Case(void));
      defaultkeyw tokval = Keyw(Default(void));
      rbrace tokval = Grouper(RBrace(void));
      while !done {
        if equal(&peek(p)->val, &casekeyw) || equal(&peek(p)->val, &defaultkeyw) || equal(&peek(p)->val, &rbrace) {
          // We disallow empty non-braced switch cases -- they look too much like fallthrough cases.
          if count(&statements) == 0 {
            return Fail;
          }
          body = {NotComputed@[ast_bracebody_info](), statements};
          done = true;
        } else {
          st ast_statement;
          if !parse_statement(p, &st) {
            return Fail;
          }
          push(&statements, st);
        }
      }
    case Error(v void):
      return Fail;
  }
  *out = {pattern, body};
  return true;
}

func parse_rest_of_constructor_pattern(p *ps, m ast_meta,
                                       out *ast_constructor_pattern) bool {
  addressof_oper ast_ident;
  addressof_constructor opt[ast_ident];
  if try_parse_oper(p, '&', &addressof_oper) {
    addressof_constructor = Has(addressof_oper);
  } else {
    addressof_constructor = None();
  }
  constructor_name ast_ident;
  decl ast_vardecl;
  if !(parse_ident(p, &constructor_name)
       && try_skip_token(p, @[tokval]Grouper(LParen(void)))
       && parse_vardecl(p, AllowBlanksYes(void), &decl)
       && try_skip_token(p, @[tokval]Grouper(RParen(void)))) {
    return Fail;
  }
  end(p, m);
  *out = {m, NotComputed@[ast_cp_info](), addressof_constructor, constructor_name, decl};
  return true;
}

func parse_case_pattern(p *ps, out *ast_case_pattern) bool {
  if try_skip_keyw(p, Default(void)) {
    *out = Default(void);
    return true;
  }
  conspatt ast_constructor_pattern;
  m ast_meta = start(p);
  if !(try_skip_keyw(p, Case(void))
       && parse_rest_of_constructor_pattern(p, m, &conspatt)) {
    return Fail;
  }
  *out = Case(conspatt);
  return true;
}

defenum triparse_result {
  Success void;
  Quickfail void;
  Error void;
};

func parse_naked_var_or_expr_statement(p *ps, fa force_assignment, out *ast_statement) bool {
  name ast_ident;
  if !try_parse_ident(p, &name) {
    // (The force_assignment argument only matters for var statements.)
    expr ast_expr;
    if !(parse_expr(p, kSemicolonPrec, &expr)
         && try_skip_oper(p, ';')) {
      return Fail;
    }
    *out = Expr(discard(expr));
    return true;
  }

  type ast_typeexpr;
  indexers array[ast_expr];
  done bool = false;
  while !done {
    if try_skip_token(p, @[tokval]Grouper(LBracket(void))) {
      if try_skip_keyw(p, Underscore(void)) {
        param box[ast_typeexpr];
        if !(try_skip_token(p, @[tokval]Grouper(RBracket(void)))
             && parse_typeexpr(p, oo(&param))) {
          return Fail;
        }

        type = collapse_indexers(indexers, @[ast_typeexpr]Arraytype({None(), param}));
        done = true;
      } else {
        ambi ast_expr;
        if !(parse_expr(p, kCommaPrec, &ambi)
             && try_skip_token(p, @[tokval]Grouper(RBracket(void)))) {
          return Fail;
        }
        push(&indexers, ambi);
      }
    } else {
      local_type ast_typeexpr;
      switch help_triparse_typeexpr(p, AllowBlanksYes(void), &local_type) {
        case Quickfail(v): {
          m ast_meta = copystart(p, name.meta);
          lhs ast_expr = expressionize(m, name, indexers);
          whole_expr ast_expr;
          if !(parse_after_atomic_expr(p, kSemicolonPrec, lhs, &whole_expr)
               && try_skip_oper(p, ';')) {
            return Fail;
          }
          *out = Expr(discard(whole_expr));
          return true;
        }
        case Error(v): {
          return Fail;
        }
        case Success(v): {
          type = collapse_indexers(indexers, local_type);
          done = true;
        }
      }
    }
  }

  decl ast_vardecl = {name, type};

  semicolon tokval = mk_oper(';');
  if equal(&peek(p)->val, &semicolon) {
    switch fa {
      case ForceAssignmentYes(v): { return Fail; }
      case ForceAssignmentNo(v): {
        step(p);
        *out = Var({NotComputed@[ast_var_info](), decl, AutoInit(None())});
        return true;
      }
    }
  }

  rhs ast_expr;
  if !(try_skip_oper(p, '=')
       && parse_expr(p, kSemicolonPrec, &rhs)
       && try_skip_oper(p, ';')) {
    return Fail;
  }
  *out = Var({NotComputed@[ast_var_info](), decl, HasExpr(embox(consume(rhs)))});
  return true;
}

func expressionize(m ast_meta, name ast_ident, indexers array[ast_expr]) ast_expr {
  lhs ast_expr = mk(name.meta, NameExpr(mk(name, None())));
  e size = count(&indexers);
  for i size = 0; i < e; i = i + 1 {
    lhs = mk(m, IndexExpr(mk(embox(lhs), embox(consume(get(&indexers, i))))));
  }
  return lhs;
}

func collapse_indexers(indexers array[ast_expr], param ast_typeexpr) ast_typeexpr {
  for i size = count(&indexers); i > 0; {
    i = i - 1;
    param = Arraytype({Has(embox(get(&indexers, i))), embox(param)});
  }
  return param;
}

func parse_rest_of_string_literal(p *ps, m ast_meta, out *ast_expr) bool {
  specs array[ast_charspec];
  again bool = true;
  while again {
    done bool = false;
    while !done {
      switch peek(p)->val {
        case StringDelim(ch i32): {
          check(ch == '\"');
          step(p);
          done = true;
        }
        case StringChar(ch i32): {
          push(&specs, {ch});
          string_step(p, '\"');
        }
        default: {
          return Fail;
        }
      }
    }

    again = false;
    if case StringDelim(ch i32) = peek(p)->val {
      if ch == '\"' {
        string_step(p, '\"');
        again = true;
      }
    }
  }
  end(p, m);
  *out = mk(m, @[ast_expr_enum]StringLiteral({specs}));
  return true;
}

func parse_rest_of_char_literal(p *ps, m ast_meta, out *ast_expr) bool {
  value i32;
  switch peek(p)->val {
    case StringChar(ch i32): {
      value = ch;
      string_step(p, '\'');
    }
    default: {
      return Fail;
    }
  }
  switch peek(p)->val {
    case StringDelim(ch i32): {
      check(ch == '\'');
      step(p);
      end(p, m);
      *out = mk(m, @[ast_expr_enum]CharLiteral({{value}}));
      return true;
    }
    default: {
      return Fail;
    }
  }
}


// TODO: This is redundant with some stdlib function.
func showu8(x size) array[u8] {
  ret array[u8];
  if x == 0 {
    push(&ret, '0');
    return ret;
  }
  while x != 0 {
    push(&ret, @[u8]'0' + ~(x % 10));
    x = x / 10;
  }
  j size = count(&ret);
  d *u8 = data(&ret);
  for i size = 0; i < j; {
    j = j - 1;
    tmp u8 = d[i];
    d[i] = d[j];
    d[j] = tmp;
    i = i + 1;
  }
  return ret;
}

func see_if_parse(file array[u8]) bool {
  im identmap = make_im();
  posits positionals = mk_positionals();
  p ps = make_ps(&im, &posits, 0, data(&file), count(&file));
  out ast_file;
  ret bool = parse_file(&p, &out);
  if !ret {
    print(Stdout(), _u8("at offset "));
    print(Stdout(), showu8(peek(&p)->interval.left.~));
    print(Stdout(), _u8("..."));
    fflush(Stdout());
  }
  return ret;
}

func run_parse_negtest(test_name array[u8], file array[u8]) bool {
  return help_run_parse_test(test_name, file, false);
}

func run_parse_test(test_name array[u8], file array[u8]) bool {
  return help_run_parse_test(test_name, file, true);
}

func help_run_parse_test(test_name array[u8], file array[u8], expected_success bool) bool {
  print(Stdout(), _u8("test "));
  if !expected_success {
    print(Stdout(), _u8("!"));
  }
  print(Stdout(), test_name);
  print(Stdout(), _u8("..."));
  fflush(Stdout());
  if expected_success != see_if_parse(file) {
    print(Stdout(), _u8("FAIL\n"));
    fflush(Stdout());
    return false;
  } else {
    print(Stdout(), _u8("PASS\n"));
    fflush(Stdout());
    return true;
  }
}

func test_parse() bool {
  pass bool = true;
  pass = pass & run_parse_test(_u8("p001"), _u8("import foo;"));
  pass = pass & run_parse_test(_u8("p002"), _u8("def a int = 0;"));
  pass = pass & run_parse_test(_u8("p003"), _u8("def abc int = 1;\n"));
  pass = pass & run_parse_test(_u8("p004"), _u8("def _ab int =0x1;\n"));
  pass = pass & run_parse_test(_u8("p005"), _u8("def ab_ int = 0x1AF2;\n"));
  pass = pass & run_parse_test(_u8("p006"), _u8("def a_b int=\n0x1AF2 ;\n"));
  pass = pass & run_parse_test(_u8("p007"), _u8("def a int=0x1AF2 ;"));
  pass = pass & run_parse_test(_u8("p008"), _u8("def a fn[int, int] = 1;"));
  pass = pass & run_parse_test(_u8("p009"),
                               _u8("def a b = func(x int, y int) int { 3; };"));
  pass = pass & run_parse_test(_u8("p010"),
                               _u8("def a = func(x int, y int) int { return 3; };"));
  pass = pass & run_parse_test(_u8("p011"),
                               _u8("def a =\n"
                                   "\tfunc(x int, y int) int { *x; };"));
  pass = pass & run_parse_test(_u8("p012"),
                               _u8("def foo bar = 2 + 3;"));
  pass = pass & run_parse_test(_u8("p013"),
                               _u8("def foo bar = 2+*3-4;"));
  pass = pass & run_parse_test(_u8("p014"),
                               _u8("def foo bar = (2 ^ 3) - 4 && x -> quux;"));
  pass = pass & run_parse_test(_u8("p015"),
                               _u8("def[] foo fn[int] = func() int {\n"
                                   "var x int = 3;\n"
                                   "  return x;};"));
  pass = pass & run_parse_test(_u8("p016"),
                               _u8("def[] foo/*heh*/fn[int] = func() int {\n"
                                   "//blah blah\n"
                                   "  var x int =-3;return x;};"));
  pass = pass & run_parse_test(_u8("p017"),
                               _u8("def a b = 1 == 1 || 2 == 1;\n"));
  pass = pass & run_parse_test(_u8("p018"),
                               _u8("def a b = 1 + - 1;"));
  pass = pass & run_parse_test(_u8("p019"),
                               _u8("def a b = 1 + -1;"));
  pass = pass & run_parse_test(_u8("p020"),
                               _u8("def a b = 1 +- 1;"));
  pass = pass & run_parse_test(_u8("p021"),
                               _u8("def a b = 1 +-1;"));
  pass = pass & run_parse_test(_u8("p022"),
                               _u8("func a() int {var x int;}"));
  pass = pass & run_parse_test(_u8("p023"),
                               _u8("func a() int {\n"
                                   "  (x+3)[y(z)] = 3;\n"
                                   "  return x[y];  }"));
  pass = pass & run_parse_test(_u8("p024"),
                               _u8("func a() int {\n"
                                   "  x[y(z)] = 3;\n"
                                   "  return x[y];  }"));
  pass = pass & run_parse_test(_u8("p025"),
                               _u8("func a() int {\n"
                                   "  x *[y(z)]t = 3;\n"
                                   "  return x[y]; }"));
  pass = pass & run_parse_test(_u8("p026"),
                               _u8("func a() int {\n"
                                   "  x [y(z)][1][2]t = 3;\n"
                                   "  return x[y]; }"));
  pass = pass & run_parse_test(_u8("p027"),
                               _u8("func a() int {\n"
                                   "  x [y(z)][1][2] = 3;\n"
                                   "  return x[y]; }"));
  pass = pass & run_parse_test(_u8("p028"),
                               _u8("func a() int {\n"
                                   "  x [y(z)][1][2];\n"
                                   "  return x[y];  }"));
  pass = pass & run_parse_test(_u8("p029"),
                               _u8("func a() int {\n"
                                   "  for var i i32 = 3; i < 3; i = i + 1 {}}"));
  pass = pass & run_parse_test(_u8("p030"),
                               _u8("func a() int {\n"
                                   "  for var i i32 = 3; i < 3; i = i + 1 { x = 2; }}"));
  pass = pass & run_parse_test(_u8("p031"),
                               _u8("def foo = baz@[a, b](1, 2, 3);"));
  pass = pass & run_parse_test(_u8("p032-a"),
                               _u8("def foo u8 = 'a';\n"));
  pass = pass & run_parse_test(_u8("p032-b"),
                               _u8("var foo u8 = 'a';\n"));
  pass = pass & run_parse_test(_u8("p033"),
                               _u8("def foo u8 = '\\n';\n"));
  pass = pass & run_parse_test(_u8("p034"),
                               _u8("def foo u8 = '\\x2A';\n"));
  pass = pass & run_parse_test(_u8("p035-a"),
                               _u8("def foo u8 = \"\\x2Azq\";\n"));
  pass = pass & run_parse_test(_u8("p035-b"),
                               _u8("def foo u8 = \"\";\n"));
  pass = pass & run_parse_test(_u8("p035-c"),
                               _u8("def foo u8 = \"abc\" \"def\";\n"));
  pass = pass & run_parse_test(_u8("p036-a"),
                               _u8("func a() b { switch c { case e(f g): { } case h(i): { j; } default: { } } }"));
  pass = pass & run_parse_test(_u8("p036-b"),
                               _u8("func a() b { switch c { case &e(f g): { } case h(i): { j; } default: { } } }"));
  pass = pass & run_parse_negtest(_u8("p036-c"),
                               _u8("func a() b { switch c { case &e(f g): case h(i): j; default: } }"));
  pass = pass & run_parse_test(_u8("p037"),
                               _u8("func `~`(x u32) size { }"));
  pass = pass & run_parse_test(_u8("p038"),
                               _u8("func foo() a { x int; }"));
  pass = pass & run_parse_test(_u8("p039"),
                               _u8("func foo() a { x int = 3; }"));
  pass = pass & run_parse_test(_u8("p040"),
                               _u8("func foo() a { for i i32 = 3; i < 3; i = i + 1 { } }"));
  pass = pass & run_parse_test(_u8("p041"),
                               _u8("func foo() a { if x { } else if y { } else { } }"));
  pass = pass & run_parse_test(_u8("p042"),
                               _u8("func foo() a { label foo; goto bar; }"));
  pass = pass & run_parse_test(_u8("p043"),
                               _u8("func foo() a { x struct { }; y union { }; z enum { }; }"));
  pass = pass & run_parse_test(_u8("p044"),
                               _u8(" deftype foo bar ;"));
  pass = pass & run_parse_test(_u8("p045-a"),
                               _u8("deftype foo fn[int, int] ;"));
  pass = pass & run_parse_test(_u8("p045-b"),
                               _u8("deftype foo fn[int, int] ;"));
  pass = pass & run_parse_test(_u8("p046-a"),
                               _u8("deftype foo struct { x y; z int; t fn[beh]; };"));
  pass = pass & run_parse_test(_u8("p046-b"),
                               _u8("deftype foo enum { x y; z int; t fn[beh]; };"));
  pass = pass & run_parse_test(_u8("p046-c"),
                               _u8("defenum foo { x y; z int; t fn[beh]; };"));
  pass = pass & run_parse_test(_u8("p047"),
                               _u8("deftype[] foo bar;\n"));
  pass = pass & run_parse_test(_u8("p048"),
                               _u8("deftype[] foo struct {x bar [quux]; };\n"));
  pass = pass & run_parse_test(_u8("p049-a"),
                               _u8("deftype[] foo struct {x [2 + 3]bar; };\n"));
  pass = pass & run_parse_test(_u8("p049-b"),
                               _u8("deftype[T, U] foo struct {x [2 + 3]bar; };\n"));
  pass = pass & run_parse_test(_u8("p050"),
                               _u8("defclass move foo [7]bar;\n"
                                   "deftype[T] foo struct { count u32; p [3]T; };\n"));
  pass = pass & run_parse_test(_u8("p051"),
                               _u8("defclass copy foo bar;"));
  pass = pass & run_parse_test(_u8("p052"),
                               _u8("extern putchar fn[i32, i32];"));
  pass = pass & run_parse_test(_u8("p053-a"),
                               _u8("export def blah fn[i32, i32] = 3;"));
  pass = pass & run_parse_test(_u8("p053-b"),
                               _u8("export var blah fn[i32, i32] = 3;"));
  pass = pass & run_parse_test(_u8("p054"),
                               _u8("access string { def foo i32 = 3; }\n"));
  pass = pass & run_parse_test(_u8("p054"),
                               _u8("access vec[_] { def foo i32 = 3; }\n"));
  pass = pass & run_parse_test(_u8("p055"),
                               _u8("func foo() a { if case foo(x) = bar { } else if y { } else { } }"));
  pass = pass & run_parse_test(_u8("p056"),
    _u8("func foo() a { if x == 0 { return 1; } else { return 2; } }"));
  return pass;
}

