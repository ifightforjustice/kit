import bar;

extern malloc fn[size, *void];
extern free fn[*void, void];

func[T] alloc_array(n size) * ^[0]T {
  u union { vp *void; tp * ^[0]T; };
  u.vp = malloc(n * sizeof@[T]);
  for i size = 0; i < n; i = i + 1 {
    init(&u.tp[i]);
  }
  return u.tp;
}

def[T] delete_array = func(n size, p *T) void {
  for i size = 0; i < n; i = i + 1 {
    destroy(&p[i]);
  }
  u union { vp *void; tp *T; };
  u.tp = p;
  free(u.vp);
};

def alloc_u8_array = func(n size) *u8 {
  u union { vp *void; u8p *u8; };
  u.vp = malloc(n);
  return u.u8p;
};

def free_u8_array = func(p *u8) void {
  u union { vp *void; u8p *u8; };
  u.u8p = p;
  free(u.vp);
};

defclass move string {
  size size;
  cap size;
  buf * ^[0]u8;
}

access string {
  def do_init = func(p *string) void {
    p->size = 0;
    p->cap = 0;
    buf * ^[0]u8;
    p->buf = buf;
  };

  def do_destroy = func(p *string) void {
    delete_array(p->cap, p->buf);
  };

  def do_copy = func(p *string, c *string) void {
    p->size = c->size;
    p->cap = c->cap;
    p->buf = alloc_array@[u8](p->size);
    for i size = 0; i < c->size; i = i + 1 {
      p->buf[i] = c->buf[i];
    }
  };

  def grow_cap = func(p *string, newcap size) void {
    buf var = alloc_array@[u8](newcap);
    sz size = p->size;
    for i size = 0; i < sz; i = i + 1 {
      buf[i] = p->buf[i];
    }

    delete_array(p->cap, p->buf);
    p->buf = buf;
    p->cap = newcap;
  };

  def append = func(p *string, c u8) void {
    if p->size == p->cap {
      new_cap size;
      if (p->cap == 0) {
        new_cap = 8;
      } else {
        new_cap = p->cap + p->cap;
      }
      grow_cap(p, new_cap);
    }

    p->buf[p->size] = c;
    p->size = p->size + 1;
  };

  def get = func(p *string, i size) u8 {
    return p->buf[i];
  };

  def count = func(p *string) size {
    return p->size;
  };

  func[T] lits(arr T) string {
    ret string;
    sz size = arr.length;
    for i size = 0; i < sz; i = i + 1 {
      append(&ret, @[u8] arr[i]);
    }
    return ret;
  }
}

def print = func(p *string) void {
  for i size = 0; i < count(p); i = i + 1 {
    ch i32 = ~get(p, i);
    ign var = putchar(ch);
  }
};
