import bar;
import string;

def foo i32 = 1;

func fac(x i32) i32 {
  acc i32 = 1;
  for i i32 = x; i > 0; i = i - 1 {
    acc = acc * i;
  }
  return acc;
}

struct ty {
  x i32;
  y i32;
}

func[T] getsize() u32 {
  return ~sizeof@[T];
}

defclass kla {
  x u32;
  y u32;
}

access kla {
  func do_destroy(p *kla) void {
    p->x = 0;
    p->y = 0;
  }
  func do_init(p *kla) void {
    p->x = 37;
    p->y = 47;
  }

  func do_copy(a *kla, c *kla) void {
    a->x = c->x;
    a->y = c->y;
  }

  func expose(p *kla) u32pair {
    return {p->x, p->y};
  }
}

struct u32pair { x u32; y u32; }

func call_kla(x kla) void {
  print(expose(&x).x);
  ign var = putchar(32);
  print(expose(&x).y);
  ign = putchar(10);
}

func try_kla() void {
  k kla;
  l u32pair = expose(&k);
  print(l.x);
  ign var = putchar(32);
  print(l.y);
  ign = putchar(10);
  call_kla(k);
}

struct i32pair { p i32; q i32; }

enum enty {
  c1 void;
  c2 i32pair;
  c3 string;
}

def blah_enty = func(x enty) enty {
  kraw enty;
  y enty = c1(void);
  u i32pair;
  y = c2(u);
  switch &x {
    case &c1(a void): {
      s string = lits("c1 (void)\n");
      print(&s);
    }
    case &c2(a): {
      s string = lits("c2 ... ");
      print(&s);
      print(@[u32]~a.p);
      ign var = putchar(32);
      print(@[u32]~a.q);
      ign = putchar(10);
    }
    default: {
      s string = lits("a default case\n");
      print(&s);
    }
  }
  if case &c1(a void) = &x {
    s string = lits("c1 (void) yet again\n");
    print(&s);
  }
  if case c1(a void) = x {
    s string = lits("c1 (void) third time\n");
    print(&s);
  } else {
    s string = lits("not c1 this time\n");
    print(&s);
  }

  while case c1(a void) = x {
    s string = lits("c1 (void) while looped\n");
    print(&s);
    x = c3(s);
  }


  daw enty = y;
  y = kraw;
  y = daw;
  return y;
};

// This could be func au8(p *string, x u8) void but
// we demo statically evaluated lambdas.
def au8 fn[*string, u8, void] = func(p *string, x u8) void {
  return append(p, x);
};

def try_string = func() void {
  x var = lits("Hello, world!\n");
  print(&x);
};

func try_osize() void {
  ox osize = 1;
  oy var = ox - 2;
  print(@[u32]~oy);
  ign var = putchar(10);
}

struct['a osize] reffer {
  r &'a osize;
}

func['a osize] mk_reffer(x &'a osize) reffer['a] {
  return {x};
}

func[T, U] subtract_rs(x *T, y *U) osize {
  return *x->r - *y->r;
}

func try_ref2() void {
  y osize = 5;
  z osize = 6;
  x1 reffer[_] = mk_reffer(&&y);
  x2 reffer[_] = mk_reffer(&&z);
  diff osize = subtract_rs(&x1, &x2);
  ign var = putchar('^');
  print(@[u32]~diff);
  diff2 osize = subtract_rs(&x2, &x2);
  ign = putchar(' ');
  print(@[u32]~diff2);
  ign = putchar(10);
}

func['a u32] un_ref(p &'a u32) u32 {
  r u32 = *p;
  return r;
}

func try_ref1() void {
  x u32 = 666;
  z u32 = un_ref(&&x);
  print(z);
  ign var = putchar(32);
  z = z + 1;
  t u32 = un_ref(&&z);
  print(t);
  ign = putchar(10);
}

func try_ref() void {
  try_ref1();
  try_ref2();
}

export func showfacs(p * ^[2]ty, num *u16) ty {
  try_kla();
  try_string();
  try_ref();

  k enty = blah_enty(c1(void));
  vz i32pair;
  vz.p = 125;
  vz.q = 343;
  ign2 var = blah_enty(c2(vz));
  ign2 = blah_enty(c3(lits("just another string\n")));

  ret ty;
  p[0].x = -5;
  p[0].y = fac(7);
  p[0].x = -p[0].x;

  tmp u32 = ~fac(p[0].x);
  y u32 = ~(p[0]).y;
  print(tmp);
  ign var = putchar(10);
  print(y);
  ign = putchar(10);

  yptr *i32 = &p[0].y;
  *yptr = 'M';  // 'M' is 77
  xptr *i32 = &p[0].x;
  *xptr = 99;

  p[1] = { 33, ~(@[u16]~ @[u32] 22 + @[u16]~ @[u32]44) };
  *num = ~ @[u32]29;

  heh ^[2]ty;
  heh[0] = p[1];
  heh[0].x = ^34;
  p[1] = heh[0];

  try_osize();

  void_value void;

  naked i32pair;
  naked.p = p[0].x;
  naked.q = ~getsize@[ty]();

  ret = {naked.p, naked.q};
  ig var = flushstdout();
  return ret;
}

def u8_value u8 = 3;
